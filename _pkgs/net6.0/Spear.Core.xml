<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spear.Core</name>
    </assembly>
    <members>
        <member name="T:Spear.Core.Attributes.MapFromAttribute">
            <summary> Map 字段映射 </summary>
        </member>
        <member name="P:Spear.Core.Attributes.MapFromAttribute.Name">
            <summary>  映射字段  </summary>
        </member>
        <member name="T:Spear.Core.Attributes.ProtocolAttribute">
            <summary> 协议属性 </summary>
        </member>
        <member name="P:Spear.Core.Attributes.ProtocolAttribute.Protocol">
            <summary> 协议 </summary>
        </member>
        <member name="E:Spear.Core.Config.ConfigHelper.ConfigChanged">
            <summary> 配置文件变更事件 </summary>
        </member>
        <member name="P:Spear.Core.Config.ConfigHelper.Config">
            <summary> 当前配置 </summary>
        </member>
        <member name="P:Spear.Core.Config.ConfigHelper.Instance">
            <summary> 单例模式 </summary>
        </member>
        <member name="M:Spear.Core.Config.ConfigHelper.AddProvider(Microsoft.Extensions.Configuration.IConfigurationSource,System.Func{Microsoft.Extensions.Configuration.IConfigurationSource,System.Boolean})">
            <summary> 添加配置 </summary>
            <param name="source"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Spear.Core.Config.ConfigHelper.Get``1(System.String,``0)">
            <summary> 配置文件读取 </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">默认值</param>
            <param name="key">配置名</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Config.ConfigHelper.Get``1(``0,System.String,System.String)">
            <summary> 配置文件读取 </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">默认值</param>
            <param name="key">配置名</param>
            <param name="supressKey">配置别名</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Config.ConfigHelper.Reload">
            <summary> 重新加载配置 </summary>
        </member>
        <member name="F:Spear.Core.Config.DConfigProvider._hasLoaded">
            <summary> 是否已加载 </summary>
        </member>
        <member name="M:Spear.Core.Config.DConfigProvider.ConvertKey(System.String)">
            <summary> 键转换 </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Config.DConfigProvider.LoadJson(System.String,System.Boolean)">
            <summary> 加载配置 </summary>
            <param name="json"></param>
            <param name="clean"></param>
        </member>
        <member name="M:Spear.Core.Config.ConfigBuilderExtensions.AddLocal(Spear.Core.Config.ISpearConfigBuilder,System.String)">
            <summary> 添加本地Json配置 </summary>
            <param name="builder"></param>
            <param name="dirPath"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Config.SpearConfig.Service">
            <summary> 服务地址 </summary>
        </member>
        <member name="P:Spear.Core.Config.SpearConfig.Services">
            <summary> 服务列表 </summary>
        </member>
        <member name="M:Spear.Core.Config.SpearConfig.GetConfig">
            <summary> 获取配置 </summary>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Constants.Mode">
            <summary> 产品模式 </summary>
        </member>
        <member name="P:Spear.Core.Constants.IsDev">
            <summary> 是否开发环境 </summary>
        </member>
        <member name="P:Spear.Core.Constants.IsTest">
            <summary> 是否测试环境 </summary>
        </member>
        <member name="P:Spear.Core.Constants.IsReady">
            <summary> 是否预发布环境 </summary>
        </member>
        <member name="P:Spear.Core.Constants.IsProd">
            <summary> 是否正式环境 </summary>
        </member>
        <member name="M:Spear.Core.Constants.LocalIp">
            <summary> 获取本地IP </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Context.HttpContextWrap">
            <summary> 请求上下文包装 </summary>
        </member>
        <member name="F:Spear.Core.Context.HttpContextWrap.Current">
            <summary> 当前上下文 </summary>
        </member>
        <member name="M:Spear.Core.Context.HttpContextWrap.#ctor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary> 当前上下文 </summary>
            <param name="current"></param>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.RemoteIpAddress">
            <summary> 客户端IP </summary>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.LocalIpAddress">
            <summary> 本地IP </summary>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.RequestType">
            <summary> 请求类型 </summary>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.Form">
            <summary> 表单 </summary>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.Body">
            <summary> 请求体 </summary>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.UserAgent">
            <summary> 用户代理 </summary>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.Referer">
            <summary> 来源 </summary>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.ContentType">
            <summary> 内容类型 </summary>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.QueryString">
            <summary> 参数 </summary>
        </member>
        <member name="M:Spear.Core.Context.HttpContextWrap.GetRawUrl(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary> 获取原始Url </summary>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.RawUrl">
            <summary> 原始地址 </summary>
        </member>
        <member name="P:Spear.Core.Context.HttpContextWrap.ClientIp">
            <summary> 获取客户端IP </summary>
        </member>
        <member name="M:Spear.Core.Context.HttpContextWrap.FromForm(Microsoft.AspNetCore.Http.IFormCollection)">
            <summary> 字典化对象 </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Context.HttpContextWrap.FromBody``1">
            <summary> 请求体 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Data.Config.ConnectionConfig.Name">
            <summary> 连接名称 </summary>
        </member>
        <member name="P:Spear.Core.Data.Config.ConnectionConfig.ProviderName">
            <summary> 数据库驱动名称 </summary>
        </member>
        <member name="P:Spear.Core.Data.Config.ConnectionConfig.ConnectionString">
            <summary> 连接字符串 </summary>
        </member>
        <member name="T:Spear.Core.Data.DbConnectionManager">
            <summary> 数据库连接管理器 </summary>
        </member>
        <member name="M:Spear.Core.Data.DbConnectionManager.AddAdapter(Spear.Core.Data.IDbConnectionAdapter)">
            <summary> 添加适配器 </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:Spear.Core.Data.DbConnectionManager.Create(System.String)">
            <summary> 创建数据库适配器 </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Data.DbConnectionManager.FormatSql(System.Data.IDbConnection,System.String)">
            <summary> 格式化SQL </summary>
            <param name="conn"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Data.DbConnectionManager.PagedSql(System.Data.IDbConnection,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary> 生成分页SQL </summary>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="columns"></param>
            <param name="order"></param>
            <param name="formatSql">格式化SQL</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Data.IActiveTransactionProvider.GetActiveTransaction(System.String)">
            <summary> 获取当前事务 </summary>
            <param name="configName"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Data.IActiveTransactionProvider.GetActiveConnection(System.String)">
            <summary> 获取当前连接 </summary>
            <param name="configName"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Data.IDbConnectionAdapter.ProviderName">
            <summary> 适配器名称 </summary>
        </member>
        <member name="P:Spear.Core.Data.IDbConnectionAdapter.ConnectionType">
            <summary> 数据库连接类型 </summary>
        </member>
        <member name="M:Spear.Core.Data.IDbConnectionAdapter.FormatSql(System.String)">
            <summary> 格式化SQL </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Data.IDbConnectionAdapter.PageSql(System.String,System.String,System.String,System.String)">
            <summary> 构造分页SQL </summary>
            <param name="sql"></param>
            <param name="columns"></param>
            <param name="order"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Data.IDbConnectionAdapter.Create">
            <summary> 创建数据库连接 </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Data.IDbConnectionProvider">
            <summary> 数据库连接提供者接口 </summary>
        </member>
        <member name="M:Spear.Core.Data.IDbConnectionProvider.Connection(System.String)">
            <summary> 获取数据库连接 </summary>
            <param name="connectionName">连接名称</param>
        </member>
        <member name="M:Spear.Core.Data.IDbConnectionProvider.Connection(System.Enum)">
            <summary> 获取数据库连接 </summary>
            <param name="connectionName">连接名称</param>
        </member>
        <member name="M:Spear.Core.Data.IDbConnectionProvider.Connection(System.String,System.String)">
            <summary> 创建数据库连接 </summary>
            <param name="connectionString"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Dependency.CurrentIocManager.IocManager">
            <summary> 依赖注入管理器 </summary>
        </member>
        <member name="M:Spear.Core.Dependency.CurrentIocManager.Resolve``1">
            <summary> 获取注入 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.CurrentIocManager.Resolve(System.Type)">
            <summary> 获取注入 </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.CurrentIocManager.Resolve``1(System.String)">
            <summary> 获取注入 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.CurrentIocManager.Resolve(System.String,System.Type)">
            <summary> 获取注入 </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.CurrentIocManager.IsRegisted(System.Type)">
            <summary> 是否已注册 </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.CurrentIocManager.IsRegisted(System.String,System.Type)">
            <summary> 是否注册注入 </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.CurrentIocManager.IsRegisted``1(System.String)">
            <summary> 是否注册注入 </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.CurrentIocManager.IsRegisted``1">
            <summary> 是否注册注入 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.CurrentIocManager.BeginLifetimeScope">
            <summary> 开启生命周期 </summary>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Dependency.CurrentIocManager.Context">
            <summary> 当前请求上下文 </summary>
        </member>
        <member name="P:Spear.Core.Dependency.CurrentIocManager.ContextWrap">
            <summary> 当前请求上下文封装 </summary>
        </member>
        <member name="T:Spear.Core.Dependency.IDependency">
            <summary> 依赖注入接口，表示该接口实现类自动注册到Ioc容器 </summary>
        </member>
        <member name="T:Spear.Core.Dependency.IScopedDependency">
            <summary> 生命周期基于请求的注入 </summary>
        </member>
        <member name="T:Spear.Core.Dependency.ISingleDependency">
            <summary> 单例注入 </summary>
        </member>
        <member name="T:Spear.Core.Dependency.IIocManager">
            <summary> 依赖注入管理器 </summary>
        </member>
        <member name="M:Spear.Core.Dependency.IIocManager.Resolve``1">
            <summary> 获取注入 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.IIocManager.Resolve(System.Type)">
            <summary> 获取注入 </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.IIocManager.Resolve``1(System.String)">
            <summary> 获取注入 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.IIocManager.Resolve(System.String,System.Type)">
            <summary> 获取注入 </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.IIocManager.IsRegistered(System.Type)">
            <summary> 是否注册注入 </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.IIocManager.IsRegistered(System.String,System.Type)">
            <summary> 是否注册注入 </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.IIocManager.IsRegistered``1(System.String)">
            <summary> 是否注册注入 </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.IIocManager.IsRegistered``1">
            <summary> 是否注册注入 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.IIocManager.BeginLifetimeScope(System.Object)">
            <summary> 启动生命周期 </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Dependency.ILifetimeScope">
            <summary> 生命周期IOC容器 </summary>
        </member>
        <member name="T:Spear.Core.Dependency.ConfigAttribute">
            <summary> 配置注入 </summary>
        </member>
        <member name="P:Spear.Core.Dependency.ConfigAttribute.Key">
            <summary> 配置键 </summary>
        </member>
        <member name="T:Spear.Core.Dependency.AutowiredAttribute">
            <summary> 属性注入 </summary>
        </member>
        <member name="M:Spear.Core.Dependency.PropertyIocExtensions.PropSet(System.Object,System.IServiceProvider)">
            <summary> 属性注入填充 </summary>
            <param name="target"></param>
            <param name="provider"></param>
        </member>
        <member name="M:Spear.Core.Dependency.PropertyIocExtensions.FieldSet(System.Object,System.IServiceProvider)">
            <summary> 字段注入填充 </summary>
            <param name="target"></param>
            <param name="provider"></param>
        </member>
        <member name="M:Spear.Core.Dependency.PropertyIocExtensions.PropResolve``1(System.IServiceProvider)">
            <summary> 获取Ioc实例(包含属性注入) </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Dependency.PropertyIocExtensions.AddPropService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary> 添加属性服务 </summary>
            <param name="services"></param>
            <param name="serviceType"></param>
            <param name="implementationType"></param>
            <param name="lifetime"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Disposable">
            <summary> 实现IDisposable接口，标示当前类型可释放 </summary>
        </member>
        <member name="T:Spear.Core.Domain.DPage">
            <summary> 通用分页对象 </summary>
        </member>
        <member name="P:Spear.Core.Domain.DPage.Page">
            <summary> 页码 </summary>
        </member>
        <member name="P:Spear.Core.Domain.DPage.Size">
            <summary> 每页数量 </summary>
        </member>
        <member name="T:Spear.Core.Domain.DService">
            <summary> 基础服务类 </summary>
        </member>
        <member name="P:Spear.Core.Domain.DService.Logger">
            <summary> 日志服务 </summary>
        </member>
        <member name="P:Spear.Core.Domain.DService.UnitOfWork">
            <summary> 操作单元 </summary>
        </member>
        <member name="M:Spear.Core.Domain.DService.Resolve``1">
            <summary> 获取IOC注入 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.DService.Resolve(System.Type)">
            <summary> 获取IOC注入 </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.DService.Resolve(System.String,System.Type)">
            <summary> 获取IOC注入 </summary>
            <param name="key"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Domain.DSort">
            <summary>
            列表字段排序条件
            </summary>
        </member>
        <member name="M:Spear.Core.Domain.DSort.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            构造一个排序字段名称和排序方式的排序条件
            </summary>
            <param name="sortField">字段名称</param>
            <param name="listSortDirection">排序方式</param>
        </member>
        <member name="P:Spear.Core.Domain.DSort.SortField">
            <summary>
            获取或设置 排序字段名称
            </summary>
        </member>
        <member name="P:Spear.Core.Domain.DSort.ListSortDirection">
            <summary>
            获取或设置 排序方向
            </summary>
        </member>
        <member name="T:Spear.Core.Domain.DSort`2">
            <summary>
            支持泛型的列表字段排序条件
            </summary>
            <typeparam name="TEntity">列表元素类型</typeparam>
            <typeparam name="TProp"></typeparam>
        </member>
        <member name="M:Spear.Core.Domain.DSort`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.ComponentModel.ListSortDirection)">
            <summary>
            使用排序字段与排序方式 初始化一个<see cref="!:Sort"/>类型的新实例
            </summary>
        </member>
        <member name="M:Spear.Core.Domain.DSort`2.GetPropertyName(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            从泛型委托获取属性名
            </summary>
        </member>
        <member name="T:Spear.Core.Domain.Dtos.DDto">
            <summary>
            数据传输实体基类
            </summary>
        </member>
        <member name="P:Spear.Core.Domain.Dtos.PageAndTimeDto.Page">
            <inheritdoc />
            <summary> 当前页码 </summary>
        </member>
        <member name="P:Spear.Core.Domain.Dtos.PageAndTimeDto.Size">
            <inheritdoc />
            <summary> 每页数量 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Dtos.PageAndTimeDto.#ctor">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Dtos.PageAndTimeDto.#ctor(System.Int32,System.Int32)">
            <summary> 构造函数 </summary>
            <param name="page"></param>
            <param name="size"></param>
        </member>
        <member name="T:Spear.Core.Domain.Dtos.IPageInput">
            <summary> 分页基础接口 </summary>
        </member>
        <member name="P:Spear.Core.Domain.Dtos.IPageInput.Page">
            <summary> 当前页码 </summary>
        </member>
        <member name="P:Spear.Core.Domain.Dtos.IPageInput.Size">
            <summary> 每页数量 </summary>
        </member>
        <member name="T:Spear.Core.Domain.Dtos.PageInputDto">
            <summary> 分页实体 </summary>
        </member>
        <member name="P:Spear.Core.Domain.Dtos.PageInputDto.Page">
            <summary> 当前页码 </summary>
        </member>
        <member name="P:Spear.Core.Domain.Dtos.PageInputDto.Size">
            <summary> 每页数量 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Dtos.PageInputDto.#ctor">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Dtos.PageInputDto.#ctor(System.Int32,System.Int32)">
            <summary> 构造函数 </summary>
            <param name="page"></param>
            <param name="size"></param>
        </member>
        <member name="P:Spear.Core.Domain.Dtos.ITimeInput.Begin">
            <summary> 开始时间（大于等于） </summary>        
        </member>
        <member name="P:Spear.Core.Domain.Dtos.ITimeInput.End">
            <summary> 截止时间（小于） </summary>
        </member>
        <member name="P:Spear.Core.Domain.Dtos.TimeInputDto.Begin">
            <summary> 开始时间（大于等于） </summary>        
        </member>
        <member name="P:Spear.Core.Domain.Dtos.TimeInputDto.End">
            <summary> 截止时间（小于） </summary>
        </member>
        <member name="T:Spear.Core.Domain.DTransaction">
            <summary> 分布式事务辅助类 </summary>
        </member>
        <member name="M:Spear.Core.Domain.DTransaction.Use(System.Action,System.Transactions.IsolationLevel,System.Nullable{System.TimeSpan})">
            <summary> 使用分布式事务 </summary>
            <param name="action"></param>
            <param name="level"></param>
            <param name="timeout"></param>
        </member>
        <member name="T:Spear.Core.Domain.Entities.BaseEntity">
            <summary> 数据库基础实体 </summary>
        </member>
        <member name="T:Spear.Core.Domain.Entities.BaseEntity`1">
            <summary> 数据库基础实体 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Entities.BaseEntity`1.IsTransient">
            <summary> 是否主键ID有值 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Entities.BaseEntity`1.Equals(System.Object)">
            <summary>
            判断两个实体是否是同一数据记录的实体
            </summary>
            <param name="obj">要比较的实体信息</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Entities.BaseEntity`1.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>
            当前 <see cref="T:System.Object"/> 的哈希代码。
            </returns>
        </member>
        <member name="M:Spear.Core.Domain.Entities.BaseEntity`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Spear.Core.Domain.IUnitOfWork">
            <summary> 业务单元操作接口 </summary>
        </member>
        <member name="P:Spear.Core.Domain.IUnitOfWork.Connection">
            <summary> 获取当前连接 </summary>
        </member>
        <member name="M:Spear.Core.Domain.IUnitOfWork.CreateConnection">
            <summary> 创建新连接 </summary>
        </member>
        <member name="P:Spear.Core.Domain.IUnitOfWork.Transaction">
            <summary> 获取当前事务 </summary>
        </member>
        <member name="P:Spear.Core.Domain.IUnitOfWork.TransConnection">
            <summary> 开启事务的连接或者当前连接 </summary>
        </member>
        <member name="P:Spear.Core.Domain.IUnitOfWork.IsTransaction">
            <summary> 是否开启了事务 </summary>
        </member>
        <member name="M:Spear.Core.Domain.IUnitOfWork.Begin(System.Nullable{System.Data.IsolationLevel})">
            <summary> 开启事务 </summary>
            <param name="level"></param>
        </member>
        <member name="M:Spear.Core.Domain.IUnitOfWork.Commit">
            <summary> 提交事务 </summary>
        </member>
        <member name="M:Spear.Core.Domain.IUnitOfWork.Rollback">
            <summary> 回滚事务 </summary>
        </member>
        <member name="M:Spear.Core.Domain.UnitOfWorkExtensions.Trans(Spear.Core.Domain.IUnitOfWork,System.Action,System.Nullable{System.Data.IsolationLevel})">
            <summary> 开启事务 </summary>
            <param name="unitOfWork"></param>
            <param name="action"></param>
            <param name="level"></param>
        </member>
        <member name="M:Spear.Core.Domain.UnitOfWorkExtensions.Trans``1(Spear.Core.Domain.IUnitOfWork,System.Func{``0},System.Nullable{System.Data.IsolationLevel})">
            <summary> 开启事务 </summary>
            <typeparam name="T"></typeparam>
            <param name="unitOfWork"></param>
            <param name="action"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Domain.ProductMode">
            <summary> 产品模式 </summary>
        </member>
        <member name="F:Spear.Core.Domain.ProductMode.Dev">
            <summary> 开发 </summary>
        </member>
        <member name="F:Spear.Core.Domain.ProductMode.Test">
            <summary> 测试服务器 </summary>
        </member>
        <member name="F:Spear.Core.Domain.ProductMode.Ready">
            <summary> 预发布 </summary>
        </member>
        <member name="F:Spear.Core.Domain.ProductMode.Prod">
            <summary> 正式 </summary>
        </member>
        <member name="T:Spear.Core.Domain.Repositories.BaseRepository`2">
            <summary> 基础仓储 </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.#ctor(Spear.Core.Domain.IUnitOfWork)">
            <summary> 构造函数 </summary>
            <param name="unitOfWork"></param>
        </member>
        <member name="P:Spear.Core.Domain.Repositories.BaseRepository`2.UnitOfWork">
            <summary> 业务操作单元 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.GetAll">
            <summary> 所有数据 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Insert(`0)">
            <summary> 插入数据 </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary> 批量插入数据 </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Delete(`0)">
            <summary> 删除数据 </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Delete(`1)">
            <summary> 删除 </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 删除 </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Update(`0)">
            <summary> 更新 </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Update(`0,System.String[])">
            <summary> 更新 </summary>
            <param name="entity"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String[])">
            <summary> 更新 </summary>
            <param name="entity"></param>
            <param name="expression"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Update(`0,System.Linq.IQueryable{`0},System.String[])">
            <summary> 更新 </summary>
            <param name="entity"></param>
            <param name="entities"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0[])">
            <summary> 更新 </summary>
            <param name="propExpression"></param>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 是否存在 </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Load(`1)">
            <summary> 加载数据 </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 第一条数据 </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 第一条或默认 </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 唯一一条 </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.List(System.Collections.Generic.IEnumerable{`1})">
            <summary> 主键批量加载 </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.PageList(System.Linq.IOrderedQueryable{`0},Spear.Core.Domain.DPage)">
            <summary> 分页 </summary>
            <param name="ordered"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Count">
            <summary> 统计数量 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 统计数量 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.LongCount">
            <summary> 统计数量 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 统计数量 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Max``1(System.Func{`0,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 最大值 </summary>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Min``1(System.Func{`0,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 最小值 </summary>
            <typeparam name="TValue"></typeparam>
            <param name="perdicate"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Average(System.Func{`0,System.Int32},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 平均值 </summary>
            <param name="perdicate"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Average(System.Func{`0,System.Int64},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 平均值 </summary>
            <param name="perdicate"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Average(System.Func{`0,System.Double},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 平均值 </summary>
            <param name="perdicate"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Average(System.Func{`0,System.Decimal},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 平均值 </summary>
            <param name="perdicate"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.Average(System.Func{`0,System.Single},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary> 平均值 </summary>
            <param name="perdicate"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Domain.Repositories.BaseRepository`2.CreateEqualityExpressionForId(`1,System.String)">
            <summary> 创建主键lamda </summary>
            <param name="id"></param>
            <param name="keyColumn"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Domain.Repositories.IRepository`2">
            <summary> 数据基础仓储接口 </summary>
        </member>
        <member name="T:Spear.Core.Domain.TransactionalBehavior">
            <summary>
            在执行数据库命令或查询期间控制事务创建行为。
            </summary>
        </member>
        <member name="F:Spear.Core.Domain.TransactionalBehavior.DoNotEnsureTransaction">
            <summary>
            如果存在现有事务，则使用它，否则在没有事务的情况下执行命令或查询。
            </summary>
        </member>
        <member name="F:Spear.Core.Domain.TransactionalBehavior.EnsureTransaction">
            <summary>
            如果不存在任何事务，则使用新事务进行操作。
            </summary>
        </member>
        <member name="T:Spear.Core.Domain.ValueDto`1">
            <summary> key - value </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Spear.Core.Domain.ValueDto">
            <summary> key - value </summary>
        </member>
        <member name="T:Spear.Core.Domain.ValueDto`2">
            <summary> key - value </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Spear.Core.Domain.ValueDto`2.Key">
            <summary> Key </summary>
        </member>
        <member name="P:Spear.Core.Domain.ValueDto`2.Value">
            <summary> Value </summary>
        </member>
        <member name="T:Spear.Core.Domain.NameDto`1">
            <summary> id - name </summary>
        </member>
        <member name="T:Spear.Core.Domain.NameDto">
            <summary> id - name </summary>
        </member>
        <member name="T:Spear.Core.Domain.NameDto`2">
            <summary> id - name </summary>
            <typeparam name="TId"></typeparam>
            <typeparam name="TName"></typeparam>
        </member>
        <member name="P:Spear.Core.Domain.NameDto`2.Id">
            <summary> id </summary>
        </member>
        <member name="P:Spear.Core.Domain.NameDto`2.Name">
            <summary> name </summary>
        </member>
        <member name="T:Spear.Core.Domain.CountDto`1">
            <summary> key - count </summary>
        </member>
        <member name="T:Spear.Core.Domain.CountDto">
            <summary> key - count </summary>
        </member>
        <member name="T:Spear.Core.Domain.CountDto`2">
            <summary> key - count </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TCount"></typeparam>
        </member>
        <member name="P:Spear.Core.Domain.CountDto`2.Key">
            <summary> key </summary>
        </member>
        <member name="P:Spear.Core.Domain.CountDto`2.Count">
            <summary> count </summary>
        </member>
        <member name="T:Spear.Core.DResult">
            <summary> 基础数据结果类 </summary>
        </member>
        <member name="P:Spear.Core.DResult.Status">
            <summary> 状态 </summary>
        </member>
        <member name="P:Spear.Core.DResult.Code">
            <summary> 状态码 </summary>
        </member>
        <member name="P:Spear.Core.DResult.Message">
            <summary> 错误消息 </summary>
        </member>
        <member name="P:Spear.Core.DResult.Timestamp">
            <summary> 时间戳 </summary>
        </member>
        <member name="P:Spear.Core.DResult.Success">
            <summary> 成功 </summary>
        </member>
        <member name="M:Spear.Core.DResult.Error(System.String,System.Int32)">
            <summary> 错误的结果 </summary>
            <param name="message"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.DResult`1.Data">
            <summary> 数据 </summary>
        </member>
        <member name="P:Spear.Core.DResults`1.Data">
            <summary> 数据集合 </summary>
        </member>
        <member name="P:Spear.Core.DResults`1.Total">
            <summary> 总数 </summary>
        </member>
        <member name="M:Spear.Core.DResults`1.#ctor">
            <summary> 默认构造函数 </summary>
        </member>
        <member name="T:Spear.Core.PagedList`1">
            <summary> 数据分页 </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Spear.Core.PagedList`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Spear.Core.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary> 构成函数 </summary>
            <param name="list"></param>
            <param name="total"></param>
        </member>
        <member name="M:Spear.Core.PagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary> 构成函数 </summary>
            <param name="queryable"></param>
            <param name="index">页索引（从1开始）</param>
            <param name="size"></param>
        </member>
        <member name="M:Spear.Core.PagedList`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32,System.Int32)">
            <summary> 初始化数据 </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="size"></param>
            <param name="total"></param>
        </member>
        <member name="P:Spear.Core.PagedList`1.Index">
            <summary> 页码(从1开始) </summary>
        </member>
        <member name="P:Spear.Core.PagedList`1.Size">
            <summary> 每页数量 </summary>
        </member>
        <member name="P:Spear.Core.PagedList`1.Total">
            <summary> 总数量 </summary>
        </member>
        <member name="P:Spear.Core.PagedList`1.Pages">
            <summary> 总页数 </summary>
        </member>
        <member name="P:Spear.Core.PagedList`1.HasPrev">
            <summary> 是否有上一页 </summary>
        </member>
        <member name="P:Spear.Core.PagedList`1.HasNext">
            <summary> 是否有下一页 </summary>
        </member>
        <member name="P:Spear.Core.PagedList`1.List">
            <summary> 列表数据 </summary>
        </member>
        <member name="F:Spear.Core.EventBus.AbstractEventBus.SubscriptionManager">
            <summary> 订阅管理器 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.AbstractEventBus.Name">
            <summary> 名称 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.AbstractEventBus.Codec">
            <summary> 编解码器 </summary>
        </member>
        <member name="T:Spear.Core.EventBus.IEventBus">
            <summary> 事件总线 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.IEventBus.Codec">
            <summary> 编解码器 </summary>
        </member>
        <member name="M:Spear.Core.EventBus.IEventBus.Subscribe``2(System.Func{``1},Spear.Core.EventBus.Options.SubscribeOption)">
            <summary> 订阅 </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TH"></typeparam>
            <param name="handler"></param>
            <param name="option"></param>
        </member>
        <member name="M:Spear.Core.EventBus.IEventBus.Unsubscribe``2">
            <summary> 取消订阅 </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TH"></typeparam>
        </member>
        <member name="M:Spear.Core.EventBus.IEventBus.Publish(System.String,System.Object,Spear.Core.EventBus.Options.PublishOption)">
            <summary> 发布 </summary>
            <param name="key">事件</param>
            <param name="message"></param>
            <param name="option"></param>
        </member>
        <member name="T:Spear.Core.EventBus.EventBusExtensions">
            <summary> 扩展 </summary>
        </member>
        <member name="M:Spear.Core.EventBus.EventBusExtensions.GetRouteKey(System.Reflection.MemberInfo)">
            <summary> 获取事件的路由键 </summary>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.EventBus.EventBusExtensions.Publish(Spear.Core.EventBus.IEventBus,Spear.Core.EventBus.DEvent,Spear.Core.EventBus.Options.PublishOption)">
            <summary> 发布 </summary>
            <param name="eventBus"></param>
            <param name="event">事件</param>
            <param name="option"></param>
        </member>
        <member name="M:Spear.Core.EventBus.EventBusExtensions.Publish(Spear.Core.EventBus.IEventBus,System.String,System.Object,System.TimeSpan)">
            <summary> 延时发布 </summary>
            <param name="key">事件</param>
            <param name="message"></param>
            <param name="delay"></param>
        </member>
        <member name="M:Spear.Core.EventBus.EventBusExtensions.Publish(Spear.Core.EventBus.IEventBus,Spear.Core.EventBus.DEvent,System.TimeSpan)">
            <summary> 发布 </summary>
            <param name="eventBus"></param>
            <param name="event">事件</param>
            <param name="option"></param>
            <param name="delay"></param>
        </member>
        <member name="T:Spear.Core.EventBus.IEventHandler">
            <summary> 事件处理 </summary>
        </member>
        <member name="T:Spear.Core.EventBus.IEventHandler`1">
            <summary> 事件处理 </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:Spear.Core.EventBus.IEventHandler`1.Handle(`0)">
            <summary>
            事件处理
            业务异常将不会重试，其他异常会自动重试5次
            前3次间隔为10^N秒,第4次12小时,第5次24小时
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.EventBus.IMessageQueue">
            <summary> 消息队列 </summary>
        </member>
        <member name="M:Spear.Core.EventBus.IMessageQueue.Send``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary> 发送消息 </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.EventBus.IMessageQueue.Send(System.Byte[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary> 发送消息 </summary>
            <param name="message"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.EventBus.IMessageQueue.Receive``1">
            <summary> 接收消息 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.EventBus.IMessageQueue.Receive``1(System.Int32)">
            <summary> 批量接收消息 </summary>
            <typeparam name="T"></typeparam>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.EventBus.IMessageQueue.Subscibe``1(System.Action{``0})">
            <summary> 订阅消息 </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.EventBus.ISubscribeAdapter">
            <summary> 订阅适配器 </summary>
        </member>
        <member name="M:Spear.Core.EventBus.ISubscribeAdapter.SubscribeAt">
            <summary> 订阅 </summary>
        </member>
        <member name="T:Spear.Core.EventBus.ISubscribeManager">
            <summary> 订阅管理器 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.ISubscribeManager.IsEmpty">
            <summary> 是否为空 </summary>
        </member>
        <member name="M:Spear.Core.EventBus.ISubscribeManager.AddSubscription``2(System.Func{``1},System.String)">
            <summary> 添加订阅 </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TH"></typeparam>
            <param name="handler"></param>
            <param name="eventKey"></param>
        </member>
        <member name="M:Spear.Core.EventBus.ISubscribeManager.RemoveSubscription``2(System.String)">
            <summary> 删除订阅 </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TH"></typeparam>
        </member>
        <member name="M:Spear.Core.EventBus.ISubscribeManager.HasSubscriptionsForEvent``1">
            <summary> 是否已订阅 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.EventBus.ISubscribeManager.HasSubscriptionsForEvent(System.String)">
            <summary> 是否已订阅 </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.EventBus.ISubscribeManager.GetEventTypeByName(System.String)">
            <summary> 获取订阅 </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.EventBus.ISubscribeManager.Clear">
            <summary> 清空订阅 </summary>
        </member>
        <member name="M:Spear.Core.EventBus.ISubscribeManager.GetHandlersForEvent``1">
            <summary> 获取订阅事件 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.EventBus.ISubscribeManager.GetHandlersForEvent(System.String)">
            <summary> 获取订阅事件 </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.EventBus.SubsciptionManagerExtension.ProcessEvent(Spear.Core.EventBus.ISubscribeManager,System.String,System.Byte[])">
            <summary> 执行事务 </summary>
            <param name="manager"></param>
            <param name="eventName"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.EventBus.Options.PublishOption">
            <summary> 发布选项 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.Options.PublishOption.Delay">
            <summary> 延时发送 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.Options.PublishOption.Headers">
            <summary> 头 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.Options.PublishOption.Durable">
            <summary> 持久化 </summary>
        </member>
        <member name="T:Spear.Core.EventBus.Options.SubscribeOption">
            <summary> 订阅选项 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.Options.SubscribeOption.EnableXDead">
            <summary> 是否开启死信队列 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.Options.SubscribeOption.EnableRetry">
            <summary> 是否开启重试机制 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.Options.SubscribeOption.Times">
            <summary> 重试间隔 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.Options.SubscribeOption.Durable">
            <summary> 持久化 </summary>
        </member>
        <member name="T:Spear.Core.EventBus.RouteKeyAttribute">
            <inheritdoc />
            <summary> 事件路由键 </summary>
        </member>
        <member name="P:Spear.Core.EventBus.RouteKeyAttribute.Key">
            <summary> 路由键 </summary>
        </member>
        <member name="M:Spear.Core.EventBus.ServiceCollectionExtension.SubscribeAt(System.IServiceProvider)">
            <summary> 开启订阅 </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.DefaultCode">
            <summary> 默认错误码 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.SystemError">
            <summary> 系统开小差了，我们正在找他回来~ </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.ParamaterError">
            <summary> 参数错误 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.ClientError">
            <summary> 调用受限 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.ClientTimeoutError">
            <summary> 调用受限 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.NeedTicket">
            <summary> 需要客户端令牌 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.InvalidTicket">
            <summary> 客户端令牌已失效 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.NoService">
            <summary> 没有可用的服务 </summary>
        </member>
        <member name="T:Spear.Core.Exceptions.ErrorCodesExtension">
            <summary> 错误码扩展 </summary>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.Message(System.Int32)">
            <summary> 获取错误码对应的错误信息 </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.Message``1(System.Int32)">
            <summary> 获取错误码对应的错误信息 </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.CodeResult``1(System.Int32)">
            <summary> 错误编码对应DResult </summary>
            <typeparam name="T"></typeparam>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.CodeResult(System.Int32)">
            <summary> 错误编码对应DResult </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.CodeException``1(System.Int32,System.String)">
            <summary> 错误编码对应的Exception </summary>
            <typeparam name="T"></typeparam>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.CodeException(System.Int32,System.String)">
            <summary> 错误编码对应的Exception </summary>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.Codes``1">
            <summary> 获取错误码 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.Codes">
            <summary> 获取错误码 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.Codes(System.Type)">
            <summary> 获取错误码 </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.CommonExtensions">
            <summary> 对象扩展辅助 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.CastTo``1(System.Object)">
            <summary>
            对象转换为泛型
            </summary>
            <param name="obj"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.CastTo``1(System.Object,``0)">
            <summary>
            对象转换为泛型
            </summary>
            <param name="obj"></param>
            <param name="def"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.CastTo(System.Object,System.Type)">
            <summary> 把对象类型转换为指定类型 </summary>
            <param name="obj"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.ToDynamic(System.Object)">
            <summary>
            将对象[主要是匿名对象]转换为dynamic
            </summary>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.Format(System.Exception,System.Boolean)">
            <summary> 异常信息格式化 </summary>
            <param name="ex"></param>
            <param name="isHideStackTrace"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.GetInnermostException(System.Exception)">
            <summary> 获取最初的异常信息 </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.UnEscape(System.Object)">
            <summary> unescape </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.GetStringResult(System.Object)">
            <summary> 获取字符串结果 </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.Zip(System.Byte[])">
            <summary> zip压缩 </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.UnZip(System.Byte[])">
            <summary> zip解压 </summary>
            <param name="zipBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtensions.ReadAsync``1(System.IO.Stream,System.String,System.Boolean)">
            <summary> 获取流对象 </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="contentType"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.ConfigurationExtensions">
            <summary> 配置扩展 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.ConfigurationExtensions.AddJson(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)">
            <summary> 添加Json配置 </summary>
            <param name="builder"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ConfigurationExtensions.AddJson(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.IO.Stream)">
            <summary> 添加Json配置 </summary>
            <param name="builder"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.PrintItem">
            <summary> 打印对象 </summary>
        </member>
        <member name="P:Spear.Core.Extensions.PrintItem.Message">
            <summary> 消息体 </summary>
        </member>
        <member name="P:Spear.Core.Extensions.PrintItem.Color">
            <summary> 打印颜色 </summary>
        </member>
        <member name="P:Spear.Core.Extensions.PrintItem.NewLine">
            <summary> 是否新行 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.PrintItem.#ctor(System.Object,System.Nullable{System.ConsoleColor},System.Boolean)">
            <summary> Ctrl </summary>
            <param name="msg"></param>
            <param name="color"></param>
            <param name="newline"></param>
        </member>
        <member name="T:Spear.Core.Extensions.ConsoleExtensions">
            <summary> 控制台扩展 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.ConsoleExtensions.Print(System.Collections.Generic.IEnumerable{Spear.Core.Extensions.PrintItem})">
            <summary> 打印对象 </summary>
            <param name="prints"></param>
        </member>
        <member name="M:Spear.Core.Extensions.ConsoleExtensions.Print(System.Object,System.Nullable{System.ConsoleColor},System.Boolean)">
            <summary> 打印对象 </summary>
            <param name="msg"></param>
            <param name="color"></param>
            <param name="newline"></param>
        </member>
        <member name="M:Spear.Core.Extensions.ConsoleExtensions.PrintSucc(System.Object,System.Boolean)">
            <summary> 打印成功 </summary>
            <param name="msg"></param>
            <param name="newline"></param>
        </member>
        <member name="M:Spear.Core.Extensions.ConsoleExtensions.PrintInfo(System.Object,System.Boolean)">
            <summary> 打印消息 </summary>
            <param name="msg"></param>
            <param name="newline"></param>
        </member>
        <member name="M:Spear.Core.Extensions.ConsoleExtensions.PrintWarn(System.Object,System.Boolean)">
            <summary> 打印警告 </summary>
            <param name="msg"></param>
            <param name="newline"></param>
        </member>
        <member name="M:Spear.Core.Extensions.ConsoleExtensions.PrintError(System.Object,System.Boolean)">
            <summary> 打印错误 </summary>
            <param name="msg"></param>
            <param name="newline"></param>
        </member>
        <member name="M:Spear.Core.Extensions.ConsoleExtensions.PrintFatal(System.Object,System.Boolean)">
            <summary> 打印致命错误 </summary>
            <param name="msg"></param>
            <param name="newline"></param>
        </member>
        <member name="T:Spear.Core.Extensions.DictionaryExtension">
            <summary> 字典类扩展 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.AddOrUpdate(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object)">
            <summary> 添加或更新 </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.GetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary> 获取值 </summary>
            <typeparam name="T"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.ToUrl(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Text.Encoding)">
            <summary> Url格式 </summary>
            <param name="dict"></param>
            <param name="encode"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.FromUrl(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean,System.Boolean)">
            <summary> 将Url格式数据转换为字典 </summary>
            <param name="dict"></param>
            <param name="url">url数据</param>
            <param name="decode">是否需要url解码</param>
            <param name="clear"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.ToXml(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary> 将网关数据转成Xml格式数据 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.FromXml(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary> 将Xml格式数据转换为字典 </summary>
            <param name="dict"></param>
            <param name="xml">Xml数据</param>
            <param name="clear">是否清空之前的字典数据</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.FromNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Specialized.NameValueCollection)">
            <summary> 将键值对转换为字典 </summary>
            <param name="dict"></param>
            <param name="collection"></param>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.ToForm(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary> 转换为表单数据 </summary>
            <param name="dict"></param>
            <param name="url">请求地址</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.ToJson(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary> 转成Json格式数据 </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.FromJson(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary> 将Json格式数据转成网关数据 </summary>
            <param name="dict"></param>
            <param name="json">json数据</param>
            <param name="clear">是否清空之前的数据</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.ToObject``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{Spear.Core.Serialize.NamingType})">
            <summary> 将网关参数转为类型 </summary>
            <typeparam name="T">类型</typeparam>
            <param name="dict"></param>
            <param name="namingType">字符串策略</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.DictionaryExtension.ToDictionary(System.Object)">
            <summary> 字典化对象 </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.EnumExtension">
            <summary> 枚举相关扩展 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.EnumExtension.GetValue``1(``0)">
            <summary> 获取枚举值 </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.EnumExtension.GetText``1(``0,System.Boolean,System.String)">
            <summary> 获取枚举描述 </summary>
            <typeparam name="T"></typeparam>
            <param name="tp"></param>
            <param name="isFlag">是否Flag,Flag将返回多个描述,并以","分割</param>
            <param name="defText">默认描述</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.EnumExtension.GetEnumCssText``1(``0,System.String[],System.Boolean,System.String)">
            <summary> 获取带颜色值的枚举描述 </summary>
            <typeparam name="T"></typeparam>
            <param name="tp"></param>
            <param name="colors">颜色值</param>
            <param name="isFlag">是否Flag,Flag将返回多个描述,并以","分割</param>
            <param name="defText">默认描述</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.EnumExtension.GetEnumCssText``1(``0,System.Boolean,System.String)">
            <summary> 获取带颜色值的枚举描述 </summary>
            <typeparam name="T"></typeparam>
            <param name="tp"></param>
            <param name="isFlag">是否Flag,Flag将返回多个描述,并以","分割</param>
            <param name="defText">默认描述</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.EnumExtension.GetEnumText``2(``1,System.Boolean,System.String)">
            <summary> 获取枚举描述 </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="type"></param>
            <param name="isFlag">是否Flag,Flag将返回多个描述,并以","分割</param>
            <param name="defText">默认描述</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.EnumExtension.GetEnumText``1(System.Int32,System.Boolean,System.String)">
            <summary> 获取枚举描述 </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="isFlag">是否Flag,Flag将返回多个描述,并以","分割</param>
            <param name="defText">默认描述</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.EnumExtension.GetEnumCssText``2(``1,System.Boolean,System.String)">
            <summary> 获取带颜色的枚举描述 </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="type"></param>
            <param name="isFlag">是否Flag,Flag将返回多个描述,并以","分割</param>
            <param name="defText">默认描述</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.EnumExtension.GetEnumCssText``1(System.Int32,System.Boolean,System.String)">
            <summary> 获取带颜色的枚举描述 </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="isFlag">是否Flag,Flag将返回多个描述,并以","分割</param>
            <param name="defText">默认描述</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.EnumExtension.ToEnum``2(``1)">
            <summary> 转换为枚举类型 </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.EnumExtension.ToEnum``1(System.Int32)">
            <summary> 转换为枚举类型 </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.ExpressionExtension">
            <summary> 表达式扩展 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.ExpressionExtension.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            以特定的条件运行组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <param name="merge">组合条件运算方式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:Spear.Core.Extensions.ExpressionExtension.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.AndAlso 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:Spear.Core.Extensions.ExpressionExtension.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.OrElse 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:Spear.Core.Extensions.ExpressionExtension.MemberNames``1(System.Linq.Expressions.Expression{``0})">
            <summary> 表达式成员名 </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ExpressionExtension.MemberNames(System.Linq.Expressions.Expression)">
            <summary> 表达式成员名称 </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.HttpContextExtension.Wrap(Microsoft.AspNetCore.Http.HttpContext)">
            <summary> Wrap </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.HttpContextExtension.Query``1(Microsoft.AspNetCore.Http.HttpContext,System.String,``0)">
            <summary> 获取该字符串的QueryString值 </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="context"></param>
            <param name="str">字符串</param>
            <param name="def">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.HttpContextExtension.Form``1(Microsoft.AspNetCore.Http.HttpContext,System.String,``0)">
            <summary> 获取该字符串的Form值 </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="context"></param>
            <param name="str">字符串</param>
            <param name="def">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.HttpContextExtension.QueryOrForm``1(Microsoft.AspNetCore.Http.HttpContext,System.String,``0)">
            <summary> 获取该字符串QueryString或Form值 </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="context"></param>
            <param name="str"></param>
            <param name="def">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.HttpContextExtension.RawUrl(Microsoft.AspNetCore.Http.HttpContext)">
            <summary> 获取原始Url </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.HttpContextExtension.SetQuery(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Object,System.String)">
            <summary> 设置参数 </summary>
            <param name="context"></param>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="url">url</param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.HttpExtensions">
            <summary> Http扩展 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.HttpExtensions.IsGzip(System.Net.Http.HttpResponseMessage)">
            <summary> 是否Gzip </summary>
            <param name="resp"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.HttpExtensions.ReadAsBufferAsync(System.Net.Http.HttpResponseMessage)">
            <summary> Read byte[] </summary>
            <param name="resp"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.HttpExtensions.ReadAsStringAsync(System.Net.Http.HttpResponseMessage,System.Text.Encoding)">
            <summary> fix gzip and encoding </summary>
            <param name="resp"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.HttpExtensions.ReadAsAsync``1(System.Net.Http.HttpResponseMessage,System.Text.Encoding,``0)">
            <summary> Read T </summary>
            <param name="resp"></param>
            <param name="encoding"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.ListExtension">
            <summary> 列表扩展 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> 判断列表为空 </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历当前对象，并且调用方法进行处理
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="instance">实例</param>
            <param name="action">方法</param>
            <returns>当前集合</returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.Each``1(``0,System.Action{System.Object})">
            <summary> 遍历执行(自适应对象和列表) </summary>
            <param name="instance"></param>
            <param name="action"></param>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.ArrayEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            比较数组相等
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">源列表</param>
            <param name="target">目标列表</param>
            <param name="allowRepeat">是否允许重复</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary> 列表去重 </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary> 列表去重 </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary> DistinctBy 过滤扩展 </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.Foreach(System.Int32,System.Action{System.Int32})">
            <summary>
            遍历N次
            </summary>
            <param name="instance"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.Foreach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            列表遍历
            </summary>
            <param name="instance"></param>
            <param name="action"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.Join(System.Collections.IEnumerable)">
            <summary>
            以“,”拼接字符串
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.Join(System.Collections.IEnumerable,System.String)">
            <summary>
            使用分隔符拼接字符串
            </summary>
            <param name="items"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.Join(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            使用分隔符、以及模板字符串拼接字符串
            </summary>
            <param name="items">待拼接集合</param>
            <param name="separator">分隔符</param>
            <param name="template">字符串格式化模板</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.RandomSort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> 随机排序 </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.In(System.Object,System.Collections.IEnumerable)">
            <summary> 是否包含在列表中 </summary>
            <param name="o"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.In``1(``0,``0[])">
            <summary>
            是否包含在列表中
            </summary>
            <param name="t"></param>
            <param name="c"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.SortByDependencies``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary> 根据依赖项排序 </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="getDependencies"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ListExtension.Trim``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary> 去除数组中的null或者空字符 </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="trimEmpty">是否清除空字符</param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.ServiceCollectionExtension">
            <summary> IOC服务扩展 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.ServiceCollectionExtension.IsRegisted``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary> 是否已注册 </summary>
            <typeparam name="T"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.ServiceCollectionExtension.IsRegisted(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary> 是否已注册 </summary>
            <param name="services"></param>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.CommonExtension">
            <summary>
             字符串通用扩展类
            </summary>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.IsNullOrEmpty(System.String)">
            <summary>
            判断是否为空
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.IsNotNullOrEmpty(System.String)">
            <summary>
            判断是否不为空
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.FormatWith(System.String,System.Object)">
            <summary>
            字符串格式化
            </summary>
            <param name="str">字符串</param>
            <param name="arg0">参数0</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.FormatWith(System.String,System.Object,System.Object)">
            <summary>
            字符串格式化
            </summary>
            <param name="str">字符串</param>
            <param name="arg0">参数0</param>
            <param name="arg1">参数1</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.FormatWith(System.String,System.Object,System.Object,System.Object)">
            <summary>
            字符串格式化
            </summary>
            <param name="str">字符串</param>
            <param name="arg0">参数0</param>
            <param name="arg1">参数1</param>
            <param name="arg2">参数2</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.FormatWith(System.String,System.Object[])">
            <summary>
            字符串格式化
            </summary>
            <param name="str"></param>
            <param name="args">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.Reverse(System.String)">
            <summary>
            倒置字符串，输入"abcd123"，返回"321dcba"
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.Sub(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截断字符扩展
            </summary>
            <param name="str">字符串</param>
            <param name="start">起始位置</param>
            <param name="len">长度</param>
            <param name="v">省略符</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.Sub(System.String,System.Int32,System.String)">
            <summary>
            截断字符扩展
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.Sub(System.String,System.Int32)">
            <summary>
            截断字符扩展
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.ConvertSql(System.String)">
            <summary>
            对传递的参数字符串进行处理，防止注入式攻击
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.Md5(System.String)">
            <summary>
            获取该值的MD5
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.Config(System.String,System.Type)">
            <summary> 读取配置文件 </summary>
            <param name="configName"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.Config``1(System.String,``0)">
            <summary> 读取配置文件 </summary>
            <typeparam name="T"></typeparam>
            <param name="configName"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.ToCamelCase(System.String)">
            <summary> 小驼峰命名法 </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.ToUrlCase(System.String)">
            <summary> url命名法 </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.HtmlEncode(System.String)">
            <summary>
            Html编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.HtmlDecode(System.String)">
            <summary>
            Html解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Url编码
            </summary>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.UrlEncode(System.String)">
            <summary>
            Url编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Url解码
            </summary>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.UrlDecode(System.String)">
            <summary>
            Url解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.FullUrl(System.String,System.String)">
            <summary> url全路径 </summary>
            <param name="url"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.Env(System.String,System.Nullable{System.EnvironmentVariableTarget})">
            <summary> 获取环境变量 </summary>
            <param name="name">变量名称</param>
            <param name="target">存储目标</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.Env(System.String,System.Type,System.Nullable{System.EnvironmentVariableTarget})">
            <summary> 获取环境变量 </summary>
            <param name="name">变量名称</param>
            <param name="type">值类型</param>
            <param name="target">存储目标</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.Env``1(System.String,``0,System.Nullable{System.EnvironmentVariableTarget})">
            <summary> 获取环境变量 </summary>
            <typeparam name="T"></typeparam>
            <param name="name">变量名称</param>
            <param name="def">默认值</param>
            <param name="target">存储目标</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.EqualsIgnoreCase(System.String,System.String)">
            <summary> 忽略大小写相等 </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.CommonExtension.CleanBase64(System.String)">
            <summary> 清理Base64字符 </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.RegexExtension">
            <summary> 正则相关扩展 </summary>
        </member>
        <member name="M:Spear.Core.Extensions.RegexExtension.IsEmail(System.String)">
            <summary> 是否是邮箱 </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.RegexExtension.IsIp(System.String)">
            <summary> 是否是IP </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.RegexExtension.IsUrl(System.String)">
            <summary> 判断是否是url </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.RegexExtension.IsMobile(System.String)">
            <summary> 是否是手机号码 </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.RegexExtension.IsFloat(System.String)">
            <summary> 是否是浮点字符 </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.RegexExtension.IsIdCardNo(System.String)">
            <summary> 是否是身份证号码 </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.RegexExtension.IsPlateNumber(System.String)">
            <summary> 是否是车牌号 </summary>
            <param name="plateNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.RegexExtension.IsVinNumber(System.String)">
            <summary> 车架号校验 </summary>
            <param name="vinNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.RegexExtension.IsBase64(System.String)">
            <summary>
            base64验证
            * 字符串只可能包含A-Z，a-z，0-9，+，/，=字符
            * 字符串长度是4的倍数
            * =只会出现在字符串最后，可能没有或者一个等号或者两个等号
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.TaskExtensions.SyncRun(System.Threading.Tasks.Task)">
            <summary> 同步执行异步方法(返回真实异常;.Result 异常是AggregateException) </summary>
            <param name="task"></param>
        </member>
        <member name="M:Spear.Core.Extensions.TaskExtensions.SyncRun``1(System.Threading.Tasks.Task{``0})">
            <summary> 同步执行异步方法(返回真实异常;.Result 异常是AggregateException) </summary>
            <typeparam name="T"></typeparam>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.TaskExtensions.TaskResult(System.Object)">
            <summary> 获取异步Task结果 </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.TaskExtensions.GetAwaiter(System.Action)">
            <summary>
            扩展Action支持async
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Extensions.TypeExtension">
            <summary>
            类型<see cref="T:System.Type"/>辅助扩展方法类
            </summary>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.IsNullableType(System.Type)">
            <summary>
            判断类型是否为Nullable类型
            </summary>
            <param name="type"> 要处理的类型 </param>
            <returns> 是返回True，不是返回False </returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.GetNonNummableType(System.Type)">
            <summary>
            由类型的Nullable类型返回实际类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.GetUnNullableType(System.Type)">
            <summary>
            通过类型转换器获取Nullable类型的基础类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.IsSimpleType(System.Type)">
            <summary> 是否是简单类型 </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.IsTaskOrVoid(System.Type)">
            <summary> 是否是Task OR Void </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.ToDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员元数据的Description特性描述信息
            </summary>
            <param name="member">成员元数据对象</param>
            <param name="inherit">是否搜索成员的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回成员的名称</returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.AttributeExists``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            检查指定指定类型成员中是否存在指定的Attribute特性
            </summary>
            <typeparam name="T">要检查的Attribute特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>返回所有指定Attribute特性的数组</returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.PropName(System.Reflection.MemberInfo,System.Nullable{Spear.Core.Serialize.NamingType},System.String)">
            <summary> 属性名(Naming属性) </summary>
            <param name="item"></param>
            <param name="namingType"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.IsEnumerable(System.Type)">
            <summary> 判断类型是否为集合类型 </summary>
            <param name="type">要处理的类型</param>
            <returns>是返回True，不是返回False</returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary> 判断当前泛型类型是否可由指定类型的实例填充 </summary>
            <param name="genericType">泛型类型</param>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.AssemblyKey(System.Reflection.Assembly)">
            <summary> 程序集key </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.DefaultValue(System.Type)">
            <summary> 默认值 </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.CheckProps``1(``0,System.Object,System.String,System.Boolean,System.Action{System.Reflection.PropertyInfo,System.Object,System.Object})">
            <summary> 属性检测 </summary>
            <typeparam name="T"></typeparam>
            <param name="source">原对象(一般为数据库Entity)</param>
            <param name="target">目标对象(一般为Dto)</param>
            <param name="keyColumn">主键(不区分大小写)</param>
            <param name="reset">是否重置(即target有属性，但是属性的值为默认值时，是否认为有更新)</param>
            <param name="propAction">属性值更新操作(三个参数,SourcePropType,BeforeValue,AfterValue)</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Extensions.TypeExtension.CheckProps``1(``0,System.Object,System.String,System.Boolean,System.Boolean)">
            <summary> 检查属性值变化 </summary>
            <typeparam name="T"></typeparam>
            <param name="source">原对象(一般为数据库Entity)</param>
            <param name="target">目标对象(一般为Dto)</param>
            <param name="keyColumn">主键(不区分大小写)</param>
            <param name="reset">是否重置(即target有属性，但是属性的值为默认值时，是否认为有更新)</param>
            <param name="setValue">是否更新Source属性值</param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Helper.ConvertHelper">
            <summary> 类型转换辅助 </summary>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.StrToFloat(System.String,System.Single)">
            <summary>
            string转换为float
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.StrToFloat(System.Object,System.Single)">
            <summary>
            object转化为float
            </summary>
            <param name="obj"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.StrToInt(System.String,System.Int32)">
            <summary>
            string转化为int
            </summary>
            <param name="str">字符</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.StrToInt(System.Object,System.Int32)">
            <summary>
            object转化为int
            </summary>
            <param name="obj"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.StrToDateTime(System.String,System.DateTime)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.StrToDateTime(System.Object,System.DateTime)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="obj"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.StrToDateTime(System.String)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.ClassConvert``1(System.Object)">
            <summary> 相同属性不同类转换 </summary>
            <typeparam name="T">转换目标类</typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.ToBigNumber(System.Int64)">
            <summary>
            获取数字中文
            不完善
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="F:Spear.Core.Helper.ConvertHelper.DecimalSystem36Array">
            <summary>
            私有36进制字符配置
            </summary>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.Ds10ToDs36(System.Int32)">
            <summary>
            10进制转换为36进制
            </summary>
            <param name="num">正整数</param>
            <returns>36进制字符串</returns>
        </member>
        <member name="M:Spear.Core.Helper.ConvertHelper.Ds36ToDs10(System.String)">
            <summary>
            36进制转换为10进制
            </summary>
            <param name="str">36进制字符串</param>
            <returns>正整数</returns>
        </member>
        <member name="T:Spear.Core.Helper.CookieHelper">
            <summary> cookie操作类 </summary>
        </member>
        <member name="T:Spear.Core.Helper.DirtyHelper">
            <summary> 敏感词辅助 </summary>
        </member>
        <member name="M:Spear.Core.Helper.DirtyHelper.AddDirty(System.String)">
            <summary> 添加脏词 </summary>
            <param name="word"></param>
        </member>
        <member name="M:Spear.Core.Helper.DirtyHelper.HasDirty(System.String)">
            <summary> 是否包含脏字 </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.DirtyHelper.ReplaceWith(System.String,System.Char)">
            <summary> 替换脏字 </summary>
            <param name="text"></param>
            <param name="mark"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Helper.DirtyNode">
            <summary> 敏感词节点 </summary>
        </member>
        <member name="M:Spear.Core.Helper.DirtyNode.Add(System.Char)">
            <summary> 添加节点 </summary>
            <param name="newChar"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Helper.EncryptHelper">
            <summary> 加密和解密 </summary>
            <summary> Hash加密 </summary>
            <summary> 基于密钥的Hash加密 </summary>
            <summary> 对称加密算法 </summary>
        </member>
        <member name="T:Spear.Core.Helper.EncryptHelper.RsaFormat">
            <summary> RSA类型 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.RsaEncrypt(System.String,System.String)">
            <summary> 使用 RSA 公钥加密 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.RsaDecrypt(System.String,System.String)">
            <summary> 使用 RSA 私钥解密 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.RsaSignature(System.String,System.String,System.String,Spear.Core.Helper.EncryptHelper.RsaFormat)">
            <summary> 使用 RSA 私钥签名 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.RsaSignature(System.String,System.String,System.String,System.String)">
            <summary> 使用 RSA 私钥签名 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.RsaVerifySign(System.String,System.String,System.String,System.String,Spear.Core.Helper.EncryptHelper.RsaFormat)">
            <summary>
            使用 RSA 公钥验证签名
            </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.RsaVerifySign(System.String,System.String,System.String,System.String,System.String)">
            <summary> 使用 RSA 公钥验证签名 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.MD5(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.MD5(System.String,System.Text.Encoding)">
            <summary> MD5加密 </summary>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Helper.EncryptHelper.HashFormat">
            <summary> Hash 加密采用的算法 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.GetHashAlgorithm(Spear.Core.Helper.EncryptHelper.HashFormat)">
            <summary> 获取 Hash 加密方法 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.Hash(System.String,Spear.Core.Helper.EncryptHelper.HashFormat)">
            <summary> 对字符串进行 Hash 加密 </summary>
        </member>
        <member name="T:Spear.Core.Helper.EncryptHelper.HmacFormat">
            <summary>
            基于密钥的 Hash 加密采用的算法
            </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.GetHmac(Spear.Core.Helper.EncryptHelper.HmacFormat,System.Byte[])">
            <summary> 获取基于密钥的 Hash 加密方法 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.Hmac(System.String,System.String,Spear.Core.Helper.EncryptHelper.HmacFormat)">
            <summary> 对字符串进行基于密钥的 Hash 加密 </summary>
            <param name="inputString"></param>
            <param name="key">密钥的长度不限，建议的密钥长度为 64 个英文字符。</param>
            <param name="hashFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Helper.EncryptHelper.SymmetricFormat">
            <summary> 对称加密采用的算法 </summary>
        </member>
        <member name="F:Spear.Core.Helper.EncryptHelper.SymmetricFormat.DES">
            <summary>
            有效的 KEY 与 IV 长度，以英文字符为单位： KEY（Min:8 Max:8 Skip:0），IV（8）
            </summary>
        </member>
        <member name="F:Spear.Core.Helper.EncryptHelper.SymmetricFormat.TripleDES">
            <summary>
            有效的 KEY 与 IV 长度，以英文字符为单位： KEY（Min:16 Max:24 Skip:8），IV（8）
            </summary>
        </member>
        <member name="F:Spear.Core.Helper.EncryptHelper.SymmetricFormat.RC2">
            <summary>
            有效的 KEY 与 IV 长度，以英文字符为单位： KEY（Min:5 Max:16 Skip:1），IV（8）
            </summary>
        </member>
        <member name="F:Spear.Core.Helper.EncryptHelper.SymmetricFormat.Rijndael">
            <summary>
            有效的 KEY 与 IV 长度，以英文字符为单位： KEY（Min:16 Max:32 Skip:8），IV（16）
            </summary>
        </member>
        <member name="F:Spear.Core.Helper.EncryptHelper.SymmetricFormat.AES">
            <summary>
            有效的 KEY 与 IV 长度，以英文字符为单位： KEY（Min:16 Max:32 Skip:8），IV（16）
            </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.GetSymmetricAlgorithm(Spear.Core.Helper.EncryptHelper.SymmetricFormat)">
            <summary> 获取对称加密方法 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.SymmetricEncrypt(System.String,Spear.Core.Helper.EncryptHelper.SymmetricFormat,System.String,System.String)">
            <summary> 对字符串进行对称加密 </summary>
        </member>
        <member name="M:Spear.Core.Helper.EncryptHelper.SymmetricDecrypt(System.String,Spear.Core.Helper.EncryptHelper.SymmetricFormat,System.String,System.String)">
            <summary> 对字符串进行对称解密 </summary>
        </member>
        <member name="T:Spear.Core.Helper.Http.HttpBodyType">
            <summary> body类型 </summary>
        </member>
        <member name="F:Spear.Core.Helper.Http.HttpBodyType.Json">
            <summary> Json </summary>
        </member>
        <member name="F:Spear.Core.Helper.Http.HttpBodyType.Form">
            <summary> Form </summary>
        </member>
        <member name="F:Spear.Core.Helper.Http.HttpBodyType.Xml">
            <summary> Xml </summary>
        </member>
        <member name="F:Spear.Core.Helper.Http.HttpBodyType.File">
            <summary> File </summary>
        </member>
        <member name="T:Spear.Core.Helper.Http.HttpHelper">
            <summary> Http请求类 </summary>
        </member>
        <member name="P:Spear.Core.Helper.Http.HttpHelper.Instance">
            <summary> 单例模式 </summary>
        </member>
        <member name="M:Spear.Core.Helper.Http.HttpHelper.RequestAsync(System.Net.Http.HttpMethod,Spear.Core.Helper.Http.HttpRequest)">
            <summary> 请求 </summary>
            <param name="method"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.HttpHelper.GetAsync(Spear.Core.Helper.Http.HttpRequest)">
            <summary> Get方法 </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.HttpHelper.GetAsync(System.String,System.Object)">
            <summary> Get方法 </summary>
            <param name="url"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.HttpHelper.PostAsync(Spear.Core.Helper.Http.HttpRequest)">
            <summary> Post方法 </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.HttpHelper.PostAsync(System.String,System.Object)">
            <summary> Post方法 </summary>
            <param name="url"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.HttpHelper.FormPostAsync(System.String,System.Object)">
            <summary> Post方法 </summary>
            <param name="url"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.HttpHelper.XmlPostAsync(System.String,System.Object)">
            <summary> Post方法 </summary>
            <param name="url"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Helper.Http.HttpRequest">
            <summary> Http请求类 </summary>
        </member>
        <member name="P:Spear.Core.Helper.Http.HttpRequest.Url">
            <summary> URL </summary>
        </member>
        <member name="P:Spear.Core.Helper.Http.HttpRequest.Params">
            <summary> URL参数 </summary>
        </member>
        <member name="P:Spear.Core.Helper.Http.HttpRequest.Headers">
            <summary> Header </summary>
        </member>
        <member name="P:Spear.Core.Helper.Http.HttpRequest.Data">
            <summary> Body参数 </summary>
        </member>
        <member name="P:Spear.Core.Helper.Http.HttpRequest.Encoding">
            <summary> 编码 </summary>
        </member>
        <member name="F:Spear.Core.Helper.Http.HttpRequest.Files">
            <summary> 文件列表 </summary>
        </member>
        <member name="P:Spear.Core.Helper.Http.HttpRequest.BodyType">
            <summary> Body类型 </summary>
        </member>
        <member name="P:Spear.Core.Helper.Http.HttpRequest.Timeout">
            <summary> 超时时间 </summary>
        </member>
        <member name="P:Spear.Core.Helper.Http.HttpRequest.MaxBufferSize">
            <summary> 最大请求长度 </summary>
        </member>
        <member name="M:Spear.Core.Helper.Http.HttpRequest.#ctor">
            <summary> ctor </summary>
        </member>
        <member name="M:Spear.Core.Helper.Http.HttpRequest.#ctor(System.String)">
            <summary> ctor </summary>
            <param name="url"></param>
        </member>
        <member name="T:Spear.Core.Helper.Http.RestHelper">
            <summary> 接口调用辅助 </summary>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.#ctor(System.String,System.Int32)">
            <summary> 构造函数 </summary>
            <param name="baseUri"></param>
            <param name="timeout">超时时间(秒)</param>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.#ctor(System.Enum)">
            <inheritdoc />
            <summary> 构造函数 </summary>
            <param name="siteEnum"></param>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.RequestStringAsync(Spear.Core.Helper.Http.HttpRequest,System.Net.Http.HttpMethod,System.Boolean)">
            <summary> 请求接口 </summary>
            <param name="request"></param>
            <param name="method"></param>
            <param name="ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.RequestAsync``1(Spear.Core.Helper.Http.HttpRequest,System.Net.Http.HttpMethod,``0)">
            <summary> 获取API接口返回的实体对象 </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <param name="method"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.GetAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> GET </summary>
            <param name="api"></param>
            <param name="paras"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.GetAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},``0)">
            <summary> GET </summary>
            <typeparam name="T"></typeparam>
            <param name="api"></param>
            <param name="paras"></param>
            <param name="headers"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.PostAsync(Spear.Core.Helper.Http.HttpRequest)">
            <summary> POST </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.PostAsync(System.String,System.Object)">
            <summary> POST </summary>
            <param name="url"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.PostAsync``1(Spear.Core.Helper.Http.HttpRequest)">
            <summary> POST </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.PostAsync``1(System.String,System.Object)">
            <summary> POST </summary>
            <param name="url"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.PutAsync(System.String,System.Object,System.Object)">
            <summary> PUT </summary>
            <param name="url"></param>
            <param name="param"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.PutAsync(Spear.Core.Helper.Http.HttpRequest)">
            <summary> PUT </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.PutAsync``1(System.String,System.Object,System.Object)">
            <summary> PUT </summary>
            <param name="url"></param>
            <param name="param"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.PutAsync``1(Spear.Core.Helper.Http.HttpRequest)">
            <summary> PUT </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.DeleteAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> DELETE </summary>
            <param name="api"></param>
            <param name="paras"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.Http.RestHelper.DeleteAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> DELETE </summary>
            <typeparam name="T"></typeparam>
            <param name="api"></param>
            <param name="paras"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Helper.IdentityHelper">
            <summary> 主键辅助类 </summary>
        </member>
        <member name="M:Spear.Core.Helper.IdentityHelper.NewSequentialGuid">
            <summary> This algorithm generates secuential GUIDs across system boundaries, ideal for databases  </summary>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Helper.IdentityHelper.Guid32">
            <summary> Guid32位 </summary>
        </member>
        <member name="P:Spear.Core.Helper.IdentityHelper.Guid16">
            <summary> Guid16位 </summary>
        </member>
        <member name="P:Spear.Core.Helper.IdentityHelper.LongId">
            <summary> 长整型ID </summary>
        </member>
        <member name="M:Spear.Core.Helper.IdWorker.#ctor(System.Int64,System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Spear.Core.Helper.IdWorker.NextId">
            <summary> 获取ID </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Helper.RandomHelper">
            <summary>
            随机数辅助
            </summary>
        </member>
        <member name="M:Spear.Core.Helper.RandomHelper.Random">
            <summary>
            获取线程级随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RandomHelper.RandomNums(System.Int32)">
            <summary>
            随机数字
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RandomHelper.RandomLetters(System.Int32)">
            <summary>
            随机字母
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RandomHelper.RandomNumAndLetters(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            获取指定长度的随机字符串
            </summary>
            <param name="length">长度</param>
            <param name="hardWord">是否包含难辨别字符</param>
            <param name="hasSpecial">特殊字符</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RandomHelper.RandomHanzi(System.Int32,System.Int32)">
            <summary>
            随机汉字
            </summary>
            <param name="length">长度</param>
            <param name="level">汉字级别，1：1级，2：2级，3：1或2级，默认为1级</param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Helper.RegexHelper">
            <summary> 正则辅助类 </summary>
        </member>
        <member name="F:Spear.Core.Helper.RegexHelper.MobileRegex">
            <summary> 手机号码 </summary>
        </member>
        <member name="F:Spear.Core.Helper.RegexHelper.EmailRegex">
            <summary> 邮箱 </summary>
        </member>
        <member name="F:Spear.Core.Helper.RegexHelper.IdCardRegex">
            <summary> 身份证 </summary>
        </member>
        <member name="F:Spear.Core.Helper.RegexHelper.PlateNumberRegex">
            <summary> 车牌号码 </summary>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.String)">
            <summary>
            获取单个正则匹配的字符
            </summary>
            <param name="regex">正则</param>
            <param name="str">字符串</param>
            <param name="ops">表达式选项</param>
            <param name="group">组</param>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.Match(System.String,System.String,System.Int32,System.String)">
            <summary>
            (简化)获取正则匹配的字符
            </summary>
            <param name="regex">正则</param>
            <param name="str">字符串</param>
            <param name="group">组</param>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.ClearBr(System.String)">
            <summary>
            清除给定字符串中的回车及换行符
            </summary>
            <param name="str">要清除的字符串</param>
            <returns>清除后返回的字符串</returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.ClearTrn(System.String)">
            <summary>
            清除\r \n \t
            </summary>
            <param name="str">str</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.GetDomain(System.String)">
            <summary>
            获取域名
            </summary>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.IsMobile(System.String)">
            <summary>
            是否是手机号码
            </summary>
            <param name="mobile"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.IsEmail(System.String)">
            <summary>
            是否是邮箱
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.IsIp(System.String)">
            <summary>
            是否是IP
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.IsUrl(System.String)">
            <summary>
             判断是否是url
            </summary>
            <param name="strUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.IsFloat(System.String)">
            <summary>
            是否是浮点字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.IsIdCardNo(System.String)">
            <summary> 是否是身份证号码 </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.IsPlateNumber(System.String)">
            <summary> 是否是车牌号 </summary>
            <param name="plateNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.IsVinNumber(System.String)">
            <summary> 车架号校验 </summary>
            <param name="vinNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.RegexHelper.ClearHtml(System.String)">
            <summary> 清除Html标签 </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.XmlHelper.XmlSerialize(System.Object,System.Text.Encoding)">
            <summary>
            将一个对象序列化为XML字符串
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="encoding">编码方式</param>
            <returns>序列化产生的XML字符串</returns>
        </member>
        <member name="M:Spear.Core.Helper.XmlHelper.XmlSerializeToFile(System.Object,System.String,System.Text.Encoding)">
            <summary>
            将一个对象按XML序列化的方式写入到一个文件
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="path">保存文件路径</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:Spear.Core.Helper.XmlHelper.XmlDeserialize``1(System.String,System.Text.Encoding,``0)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="xml">包含对象的XML字符串</param>
            <param name="encoding">编码方式</param>
            <param name="def"></param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:Spear.Core.Helper.XmlHelper.XmlDeserializeFromPath``1(System.String,System.Text.Encoding,``0)">
            <summary>
            读入一个文件，并按XML的方式反序列化对象。
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="path">文件路径</param>
            <param name="encoding">编码方式</param>
            <param name="def"></param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:Spear.Core.Helper.XmlHelper.XmlSerializeFromPath(System.String,System.Object)">
            <summary>
            xml序列化
            </summary>
            <param name="path">xml文件路径</param>
            <param name="obj">序列化对象</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Helper.XmlHelper.XmlDeserializeFromPath``1(System.String,``0)">
            <summary>
            xml反序列化
            </summary>
            <typeparam name="T">xml序列化类型</typeparam>
            <param name="path">xml文件路径</param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="F:Spear.Core.Message.ContentTypes.InvokeType">
            <summary> 调用消息类型 </summary>
        </member>
        <member name="F:Spear.Core.Message.ContentTypes.InvokeResultType">
            <summary> 调用结果消息类型 </summary>
        </member>
        <member name="T:Spear.Core.Message.IMessageEncoder">
            <summary> 消息编码器 </summary>
        </member>
        <member name="M:Spear.Core.Message.IMessageEncoder.EncodeAsync(System.Object,System.Boolean)">
            <summary> 消息编码 </summary>
            <param name="message"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Message.IMessageDecoder">
            <summary> 消息解码器 </summary>
        </member>
        <member name="M:Spear.Core.Message.IMessageDecoder.DecodeAsync(System.Byte[],System.Type,System.Boolean)">
            <summary> 消息解码 </summary>
            <param name="data"></param>
            <param name="type"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Message.MessageCodecExtensions.DecodeAsync``1(Spear.Core.Message.IMessageDecoder,System.Byte[],System.Boolean)">
            <summary> 解码 </summary>
            <typeparam name="T"></typeparam>
            <param name="decoder"></param>
            <param name="data"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Message.MessageCodecExtensions.Encode(Spear.Core.Message.IMessageEncoder,System.Object,System.Boolean)">
            <summary> 编码 </summary>
            <param name="encoder"></param>
            <param name="message"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Message.MessageCodecExtensions.Decode(Spear.Core.Message.IMessageDecoder,System.Byte[],System.Type,System.Boolean)">
            <summary> 解码 </summary>
            <param name="decoder"></param>
            <param name="data"></param>
            <param name="type"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Message.MessageCodecExtensions.Decode``1(Spear.Core.Message.IMessageDecoder,System.Byte[],System.Boolean)">
            <summary> 解码 </summary>
            <typeparam name="T"></typeparam>
            <param name="decoder"></param>
            <param name="data"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Message.ReceivedDelegate">
            <summary> 接受到消息的委托 </summary>
            <param name="sender">消息发送者。</param>
            <param name="message">接收到的消息。</param>
        </member>
        <member name="E:Spear.Core.Message.IMessageListener.Received">
            <summary> 接收到消息的事件 </summary>
        </member>
        <member name="M:Spear.Core.Message.IMessageListener.OnReceived(Spear.Core.Message.IMessageSender,Spear.Core.Message.Models.DMessage)">
            <summary> 触发接收到消息事件 </summary>
            <param name="sender">消息发送者。</param>
            <param name="message">接收到的消息。</param>
            <returns>一个任务。</returns>
        </member>
        <member name="T:Spear.Core.Message.IMessageSender">
            <summary>  消息发送者 </summary>
        </member>
        <member name="M:Spear.Core.Message.IMessageSender.Send(Spear.Core.Message.Models.DMessage,System.Boolean)">
            <summary> 发送消息 </summary>
            <param name="message"></param>
            <param name="flush"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Message.IMessageSerializer">
            <summary> 消息序列化 </summary>
        </member>
        <member name="T:Spear.Core.Message.Implementation.MessageListener">
            <summary> 消息监听者 </summary>
        </member>
        <member name="E:Spear.Core.Message.Implementation.MessageListener.Received">
            <inheritdoc />
            <summary>
            接收到消息的事件。
            </summary>
        </member>
        <member name="M:Spear.Core.Message.Implementation.MessageListener.OnReceived(Spear.Core.Message.IMessageSender,Spear.Core.Message.Models.DMessage)">
            <summary> 接收到消息 </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Message.Json.Models.JsonInvokeMessage.ServiceId">
            <summary> 服务Id </summary>
        </member>
        <member name="P:Spear.Core.Message.Json.Models.JsonInvokeMessage.Parameters">
            <summary> 服务参数 </summary>
        </member>
        <member name="P:Spear.Core.Message.Json.Models.JsonResultMessage.Code">
            <summary> 状态码 </summary>
        </member>
        <member name="P:Spear.Core.Message.Json.Models.JsonResultMessage.Message">
            <summary> 错误消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Json.Models.JsonResultMessage.Content">
            <summary> 数据实体 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.DMessageResult`1.Code">
            <summary> 状态码 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.DMessageResult`1.Message">
            <summary> 错误消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.DMessageResult`1.Content">
            <summary> 数据实体 </summary>
        </member>
        <member name="T:Spear.Core.Message.Models.IMessageDynamic">
            <summary> 动态类型 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageDynamic.ContentType">
            <summary> 类型 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageDynamic.Content">
            <summary> 数据 </summary>
        </member>
        <member name="M:Spear.Core.Message.Models.IMessageDynamic.SetValue(System.Object)">
            <summary> 设置对象 </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spear.Core.Message.Models.IMessageDynamic.GetValue">
            <summary> 获取对象 </summary>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageInvoke`1.ServiceId">
            <summary> 服务Id </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageInvoke`1.Parameters">
            <summary> 服务参数 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageResult`1.Code">
            <summary> 状态码 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageResult`1.Message">
            <summary> 错误消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageResult`1.Content">
            <summary> 数据实体 </summary>
        </member>
        <member name="T:Spear.Core.Message.Models.InvokeMessage">
            <summary> 调用消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.InvokeMessage.ServiceId">
            <summary> 服务Id </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.InvokeMessage.Parameters">
            <summary> 服务参数 </summary>
        </member>
        <member name="T:Spear.Core.Message.Models.MessageResult">
            <summary> 调用结果消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.MessageResult.Code">
            <summary> 状态码 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.MessageResult.Message">
            <summary> 错误消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.MessageResult.Content">
            <summary> 数据实体 </summary>
        </member>
        <member name="T:Spear.Core.Micro.IMicroBuilder">
            <summary> Spear 服务构建器 </summary>
        </member>
        <member name="P:Spear.Core.Micro.IMicroBuilder.Services">
            <summary> 服务集合 </summary>
        </member>
        <member name="T:Spear.Core.Micro.IMicroClientBuilder">
            <summary> Spear客户端构建器 </summary>
        </member>
        <member name="T:Spear.Core.Micro.IMicroServerBuilder">
            <summary> Spear服务端构建器 </summary>
        </member>
        <member name="T:Spear.Core.Micro.MicroBuilder">
            <summary> Spear构建器 </summary>
        </member>
        <member name="P:Spear.Core.Micro.MicroBuilder.Services">
            <summary> 服务集合 </summary>
        </member>
        <member name="T:Spear.Core.Micro.IMicroClient">
            <summary> 微服务客户端 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroClient.Send(Spear.Core.Message.Models.InvokeMessage)">
            <summary> 发送消息 </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.IMicroClientFactory">
            <summary> Spear客户端工厂 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroClientFactory.CreateClient(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 创建客户端 </summary>
            <param name="serviceAddress"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.IMicroEntryFactory">
            <summary> 服务发现工厂 </summary>
        </member>
        <member name="P:Spear.Core.Micro.IMicroEntryFactory.Entries">
            <summary> 方法列表 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroEntryFactory.GetContracts">
            <summary> 获取所有服务程序集 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroEntryFactory.GetServiceId(System.Reflection.MethodInfo)">
            <summary> 获取服务条码Id </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroEntryFactory.Find(System.String)">
            <summary> 查找服务条目 </summary>
            <param name="serviceId"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.IMicroExecutor">
            <summary> 服务执行者 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroExecutor.Execute(Spear.Core.Message.IMessageSender,Spear.Core.Message.Models.InvokeMessage)">
            <summary> 执行 </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.IMicroHost">
            <summary> 微服务主机 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroHost.Start(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 启动服务 </summary>
            <param name="serviceAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroHost.Start(System.String,System.Int32)">
            <summary> 启动服务 </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroHost.Stop">
            <summary> 停止服务 </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.IMicroListener">
            <summary> 微服务监听者 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroListener.Start(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 启动监听 </summary>
            <param name="serviceAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroListener.Start(System.String,System.Int32)">
            <summary> 启动监听 </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroListener.Stop">
            <summary> 停止监听 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.DMicroClientFactory.Create(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 创建客户端 </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.DMicroClientFactory.Remove(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 删除客户端缓存 </summary>
            <param name="address"></param>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.DMicroHost">
            <summary> 服务宿主基类 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.DMicroHost.MicroListener">
            <summary> 消息监听者。 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.DMicroHost.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.DMicroHost.Start(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 启动微服务 </summary>
            <param name="serviceAddress">主机终结点。</param>
            <returns>一个任务。</returns>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.MicroClient">
            <summary> 默认服务客户端 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntry.Method">
            <summary> 方法 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntry.Invoke">
            <summary> 执行代理 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntry.IsTask">
            <summary> 是否是Task </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntry.IsNotify">
            <summary> 是否是通知 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntry.Parameters">
            <summary> 参数 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntry.#ctor(System.Reflection.MethodInfo)">
            <summary> Ctor </summary>
            <param name="method"></param>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.MicroEntryFactory">
            <summary>/// 本地服务工厂
            </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntryFactory.InitServices">
            <summary> 初始化服务 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntryFactory.GenerateServiceId(System.Reflection.MethodInfo)">
            <summary> 生成服务ID </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntryFactory.GetContracts">
            <summary> 获取服务列表 </summary>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntryFactory.Entries">
            <summary> 服务方法 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntryFactory.GetServiceId(System.Reflection.MethodInfo)">
            <summary> 获取服务ID </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntryFactory.Find(System.String)">
            <summary> 查找服务 </summary>
            <param name="serviceId"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.MicroExecutor">
            <inheritdoc />
            <summary> 默认服务执行者 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroExecutor.Execute(Spear.Core.Message.IMessageSender,Spear.Core.Message.Models.InvokeMessage)">
            <summary> 执行 </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.MicroHost">
            <summary> 服务宿主 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroHost.#ctor(Spear.Core.Micro.IMicroExecutor,Spear.Core.Micro.IMicroListener,Spear.Core.Micro.Services.IServiceRegister,Spear.Core.Micro.IMicroEntryFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary> 服务宿主机 </summary>
            <param name="serviceExecutor"></param>
            <param name="microListener"></param>
            <param name="serviceRegister"></param>
            <param name="entryFactory"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroHost.Start(Spear.Core.Micro.Services.ServiceAddress)">
            <inheritdoc />
            <summary> 启动服务 </summary>
            <param name="serviceAddress">主机终结点。</param>
            <returns>一个任务。</returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroHost.Stop">
            <summary> 停止服务 </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.MicroListener">
            <inheritdoc cref="T:Spear.Core.Message.Implementation.MessageListener" />
            <summary> 默认服务监听者 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroListener.Start(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 开启监听 </summary>
            <param name="serviceAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroListener.Start(System.String,System.Int32)">
            <summary> 开启监听 </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroListener.Stop">
            <summary> 停止监听 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Services.DServiceFinder.QueryService(System.Type,Spear.Core.ProductMode[])">
            <summary> 查询服务 </summary>
            <param name="serviceType"></param>
            <param name="modes"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Services.DServiceFinder.Find(System.Type)">
            <summary> 服务发现 </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.Services.IServiceFinder">
            <summary> 服务探测器 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Services.IServiceFinder.Find(System.Type)">
            <summary> 服务发现 </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Services.IServiceFinder.CleanCache(System.Type)">
            <summary> 清除服务缓存 </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.Services.IServiceRegister">
            <summary> 服务注册器 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Services.IServiceRegister.Regist(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 注册服务 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Services.IServiceRegister.Deregist">
            <summary> 注销服务 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.Ip">
            <summary> IP </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.Protocol">
            <summary> 服务协议 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.Host">
            <summary> Host </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.Port">
            <summary> 端口号 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.Service">
            <summary> 对外注册的服务地址(ip或DNS) </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.ServicePort">
            <summary> 对外服务端口 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.Weight">
            <summary> 权重 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.Gzip">
            <summary> 是否开启Gzip </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.Codec">
            <summary> 服务编码 </summary>
        </member>
        <member name="T:Spear.Core.Micro.Services.ServiceAddressExtensions">
            <summary> 服务地址扩展 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Services.ServiceAddressExtensions.Address(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 服务地址 </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Services.ServiceAddressExtensions.Random">
            <summary>
            获取线程级随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Services.ServiceAddressExtensions.Random(System.Collections.Generic.IList{Spear.Core.Micro.Services.ServiceAddress})">
            <summary> 权重随机 </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.ProductMode">
            <summary> 产品模式 </summary>
        </member>
        <member name="F:Spear.Core.ProductMode.Dev">
            <summary> 开发 </summary>
        </member>
        <member name="F:Spear.Core.ProductMode.Test">
            <summary> 测试服务器 </summary>
        </member>
        <member name="F:Spear.Core.ProductMode.Ready">
            <summary> 预发布 </summary>
        </member>
        <member name="F:Spear.Core.ProductMode.Prod">
            <summary> 正式 </summary>
        </member>
        <member name="T:Spear.Core.Proxy.ClientProxy">
            <summary> 代理调用 </summary>
        </member>
        <member name="M:Spear.Core.Proxy.ClientProxy.#ctor(Microsoft.Extensions.Logging.ILogger{Spear.Core.Proxy.ClientProxy},System.IServiceProvider,Spear.Core.Micro.Services.IServiceFinder)">
            <inheritdoc />
            <summary> 构造函数 </summary>
        </member>
        <member name="M:Spear.Core.Proxy.ClientProxy.ClientInvokeAsync(Spear.Core.Micro.Services.ServiceAddress,Spear.Core.Message.Models.InvokeMessage)">
            <summary> 执行请求 </summary>
            <param name="serviceAddress"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Reflection.DefaultAssemblyFinder.FindAll">
            <summary> 查找所有程序集 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Reflection.DefaultAssemblyFinder.Find(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary> 查找程序集 </summary>
            <param name="assemblyFunc"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Reflection.IAssemblyFinder">
            <summary> 程序集查找器 </summary>
        </member>
        <member name="T:Spear.Core.Reflection.ITypeFinder">
            <summary> 类型查找器 </summary>
        </member>
        <member name="T:Spear.Core.Serialize.DefaultJsonHelper">
            <summary> 默认Json序列化 </summary>
        </member>
        <member name="M:Spear.Core.Serialize.DefaultJsonHelper.ToJson``1(``0,Spear.Core.Serialize.NamingType,System.Boolean)">
            <summary> 序列化为json格式 </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonObj"></param>
            <param name="namingType">命名规则</param>
            <param name="indented">是否缩进</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.DefaultJsonHelper.ToJson``1(``0,Spear.Core.Serialize.NamingType,System.Boolean,System.Boolean,System.String[])">
            <summary> 序列化为json格式 </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonObj"></param>
            <param name="namingType">命名规则</param>
            <param name="indented">是否缩进</param>
            <param name="retain">保留/排除</param>
            <param name="props">属性选择</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.DefaultJsonHelper.Json``1(System.String,Spear.Core.Serialize.NamingType)">
            <summary> 将json发序列化为对象 </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="namingType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.DefaultJsonHelper.JsonList``1(System.String,Spear.Core.Serialize.NamingType)">
            <summary> 反序列化json为列表 </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="namingType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.DefaultJsonHelper.Json``1(System.String,``0,Spear.Core.Serialize.NamingType)">
            <summary> 反序列化到匿名对象 </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="anonymousTypeObject"></param>
            <param name="namingType"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Serialize.IJsonHelper">
            <summary> Json序列化接口 </summary>
        </member>
        <member name="M:Spear.Core.Serialize.IJsonHelper.ToJson``1(``0,Spear.Core.Serialize.NamingType,System.Boolean)">
            <summary> Json序列化 </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonObj"></param>
            <param name="namingType">命名规则</param>
            <param name="indented">是否缩进</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.IJsonHelper.ToJson``1(``0,Spear.Core.Serialize.NamingType,System.Boolean,System.Boolean,System.String[])">
            <summary> Json序列化 </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonObj"></param>
            <param name="namingType">命名规则</param>
            <param name="indented">是否缩进</param>
            <param name="retain">保留/排除</param>
            <param name="props">属性选择</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.IJsonHelper.Json``1(System.String,Spear.Core.Serialize.NamingType)">
            <summary> Json反序列化 </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="namingType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.IJsonHelper.JsonList``1(System.String,Spear.Core.Serialize.NamingType)">
            <summary> Json列表反序列化 </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="namingType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.IJsonHelper.Json``1(System.String,``0,Spear.Core.Serialize.NamingType)">
            <summary> 匿名对象反序列化 </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="anonymousTypeObject"></param>
            <param name="namingType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.JsonContractResolver.#ctor(Spear.Core.Serialize.NamingType,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary> 构造函数 </summary>
            <param name="camelCase">驼峰</param>
            <param name="retain">保留/排除：true为保留</param>
            <param name="replaceProps">需替换的属性</param>
            <param name="props"></param>
        </member>
        <member name="T:Spear.Core.Serialize.JsonHelper">
            <summary> Json序列化辅助 </summary>
        </member>
        <member name="M:Spear.Core.Serialize.JsonHelper.UseHelper(Spear.Core.Serialize.IJsonHelper)">
            <summary> 使用某个Json序列化方式 </summary>
            <param name="helper"></param>
        </member>
        <member name="M:Spear.Core.Serialize.JsonHelper.ToJson``1(``0,Spear.Core.Serialize.NamingType,System.Boolean)">
            <summary> Json序列化 </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonObj"></param>
            <param name="namingType">命名规则</param>
            <param name="indented">是否缩进</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.JsonHelper.ToJson``1(``0,Spear.Core.Serialize.NamingType,System.Boolean,System.Boolean,System.String[])">
            <summary> Json序列化 </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonObj"></param>
            <param name="namingType">命名规则</param>
            <param name="indented">是否缩进</param>
            <param name="retain">保留/排除</param>
            <param name="props">属性选择</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.JsonHelper.Json``1(System.String,Spear.Core.Serialize.NamingType)">
            <summary> Json反序列化 </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="namingType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.JsonHelper.JsonList``1(System.String,Spear.Core.Serialize.NamingType)">
            <summary> Json列表反序列化 </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="namingType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Serialize.JsonHelper.Json``1(System.String,``0,Spear.Core.Serialize.NamingType)">
            <summary> 匿名对象反序列化 </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="anonymousTypeObject"></param>
            <param name="namingType"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Serialize.NamingType">
            <summary> 命名规范 </summary>
        </member>
        <member name="F:Spear.Core.Serialize.NamingType.Normal">
            <summary> 默认命名,UserName </summary>
        </member>
        <member name="F:Spear.Core.Serialize.NamingType.CamelCase">
            <summary> 驼峰命名,如：userName </summary>
        </member>
        <member name="F:Spear.Core.Serialize.NamingType.UrlCase">
            <summary> url命名,如：user_name，注：反序列化时也需要指明 </summary>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.GetService``1(System.IServiceProvider,Spear.Core.Config.ServiceProtocol)">
            <summary> 获取服务 </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.GetService(System.IServiceProvider,System.Type,Spear.Core.Config.ServiceProtocol)">
            <summary> 获取服务 </summary>
            <param name="provider"></param>
            <param name="type"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.GetClientCodec(System.IServiceProvider,Spear.Core.Config.ServiceCodec)">
            <summary> 获取服务 </summary>
            <param name="provider"></param>
            <param name="codec"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.GetService``1(System.IServiceProvider,Spear.Core.Config.ServiceCodec)">
            <summary> 获取服务 </summary>
            <param name="provider"></param>
            <param name="codec"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddJsonCodec(Spear.Core.Micro.IMicroServerBuilder)">
            <summary> 使用Json编解码器。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddJsonCodec(Spear.Core.Micro.IMicroClientBuilder)">
            <summary> 使用Json编解码器。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddSession(Spear.Core.Micro.IMicroClientBuilder)">
            <summary> 使用Session。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddSession``1(Spear.Core.Micro.IMicroClientBuilder)">
            <summary> 使用Session。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddSession(Spear.Core.Micro.IMicroServerBuilder)">
            <summary> 使用Session。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddSession``1(Spear.Core.Micro.IMicroServerBuilder)">
            <summary> 使用Session。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddDefaultRouter(Spear.Core.Micro.IMicroServerBuilder,System.Action{Spear.Core.Micro.Services.DefaultServiceRouter})">
            <summary> 添加默认服务路由 </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="routerAction"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddDefaultRouter(Spear.Core.Micro.IMicroClientBuilder,System.Action{Spear.Core.Micro.Services.DefaultServiceRouter})">
            <summary> 添加默认服务路由 </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="routerAction"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddMicroClient(Spear.Core.Micro.MicroBuilder,System.Action{Spear.Core.Micro.IMicroClientBuilder},System.Action{Spear.Core.Config.SpearConfig})">
            <summary> 添加微服务客户端 </summary>
            <param name="services"></param>
            <param name="builderAction"></param>
            <param name="configAction"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddMicroService(Spear.Core.Micro.MicroBuilder,System.Action{Spear.Core.Micro.IMicroServerBuilder},System.Action{Spear.Core.Config.SpearConfig})">
            <summary> 添加微服务 </summary>
            <param name="services"></param>
            <param name="builderAction"></param>
            <param name="configAction"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.UseMicroService(System.IServiceProvider,System.String,System.Int32)">
            <summary> 开启微服务 </summary>
            <param name="provider"></param>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.UseMicroService(System.IServiceProvider,System.Action{Spear.Core.Micro.Services.ServiceAddress})">
            <summary> 开启微服务 </summary>
            <param name="provider"></param>
            <param name="addressAction"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Session.IMicroSession.UserId">
            <summary> 用户ID </summary>
        </member>
        <member name="P:Spear.Core.Session.IMicroSession.TenantId">
            <summary> 租户ID </summary>
        </member>
        <member name="P:Spear.Core.Session.IMicroSession.UserName">
            <summary> 用户名 </summary>
        </member>
        <member name="P:Spear.Core.Session.IMicroSession.Role">
            <summary> 角色 </summary>
        </member>
        <member name="P:Spear.Core.Session.IMicroSession.TenancySides">
            <summary> 多租户类型 </summary>
        </member>
        <member name="M:Spear.Core.Session.IMicroSession.Use(Spear.Core.Session.SessionDto)">
            <summary> 使用租户 </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Session.MicroSessionExtensions.GetUserId``1(Spear.Core.Session.IMicroSession,``0)">
            <summary> 获取UserId </summary>
            <typeparam name="T"></typeparam>
            <param name="session"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Session.MicroSessionExtensions.GetTenantId``1(Spear.Core.Session.IMicroSession,``0)">
            <summary> 获取TenantId </summary>
            <typeparam name="T"></typeparam>
            <param name="session"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Session.MicroSessionExtensions.GetRequiredUserId``1(Spear.Core.Session.IMicroSession)">
            <summary> 获取必须的UserId(没有将抛出异常) </summary>
            <typeparam name="T"></typeparam>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Session.MicroSessionExtensions.GetRequiredTenantId``1(Spear.Core.Session.IMicroSession)">
            <summary> 获取必须的TenantId(如果没有将抛出异常) </summary>
            <typeparam name="T"></typeparam>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Session.SessionDto.UserId">
            <summary> 用户ID </summary>
        </member>
        <member name="P:Spear.Core.Session.SessionDto.TenantId">
            <summary> 租户ID </summary>
        </member>
        <member name="P:Spear.Core.Session.SessionDto.UserName">
            <summary> 用户名 </summary>
        </member>
        <member name="P:Spear.Core.Session.SessionDto.Role">
            <summary> 角色 </summary>
        </member>
        <member name="P:Spear.Core.Session.SpearClaimTypes.UserName">
            <summary>
            UserId.
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Name"/>
            </summary>
        </member>
        <member name="P:Spear.Core.Session.SpearClaimTypes.UserId">
            <summary>
            UserId.
            Default: <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier"/>
            </summary>
        </member>
        <member name="P:Spear.Core.Session.SpearClaimTypes.Role">
            <summary>
            UserId.
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Role"/>
            </summary>
        </member>
        <member name="P:Spear.Core.Session.SpearClaimTypes.TenantId">
            <summary>
            TenantId.
            Default: http://www.spear.com/identity/claims/tenantId
            </summary>
        </member>
        <member name="T:Spear.Core.Singleton">
            <summary> 单例辅助 </summary>
        </member>
        <member name="P:Spear.Core.Singleton.AllSingletons">
            <summary> 所有单例 </summary>
        </member>
        <member name="T:Spear.Core.Singleton`1">
            <summary> 单例泛型辅助 </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Spear.Core.Singleton`1.Instance">
            <summary> 单例 </summary>
        </member>
        <member name="T:Spear.Core.SingletonList`1">
            <summary>
            单例泛型列表辅助
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Spear.Core.SingletonList`1.Instance">
            <summary>
            The singleton instance for the specified type T. Only one instance (at the time) of this list for each type of T.
            </summary>
        </member>
        <member name="M:Spear.Core.SpearExtensions.ServiceName(System.Reflection.Assembly)">
            <summary> 服务命名 </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.ServiceKey(System.Reflection.MethodInfo)">
            <summary> 获取服务主键 </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Tenant.ITenantResolver">
            <summary> 租户解析器 </summary>
        </member>
        <member name="M:Spear.Core.Tenant.ITenantResolver.ResolveTenantId">
            <summary> 获取租户ID </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Tenant.TenancySides">
            <summary> 租户站点类型 </summary>
        </member>
        <member name="F:Spear.Core.Tenant.TenancySides.Tenant">
            <summary> 租户 </summary>
        </member>
        <member name="F:Spear.Core.Tenant.TenancySides.Host">
            <summary> 主机 </summary>
        </member>
        <member name="T:Spear.Core.Tests.CodeTimer">
            <summary>
            代码性能测试计时器
            </summary>
        </member>
        <member name="M:Spear.Core.Tests.CodeTimer.Time(System.String,System.Int32,System.Action,System.Int32)">
            <summary> 代码耗时测试 </summary>
            <param name="name">测试名称</param>
            <param name="iteration">重复次数</param>
            <param name="action">执行方法</param>
            <param name="thread">线程数</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Tests.CodeTimer.UseTest">
            <summary> 使用案例 StringBuilder vs contact </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Tests.CodeTimerResult">
            <summary>
            表示 <see cref="T:Spear.Core.Tests.CodeTimer"/> 执行结果的类.
            </summary>
        </member>
        <member name="M:Spear.Core.Tests.CodeTimerResult.#ctor">
            <summary>
            初始化 <see cref="T:Spear.Core.Tests.CodeTimer"/> 类的新实例.
            </summary>
        </member>
        <member name="P:Spear.Core.Tests.CodeTimerResult.Name">
            <summary>
            名称.
            </summary>
        </member>
        <member name="P:Spear.Core.Tests.CodeTimerResult.TimeElapsed">
            <summary>
            运行时间.(ms)
            </summary>
        </member>
        <member name="P:Spear.Core.Tests.CodeTimerResult.CpuCycles">
            <summary>
            Cpu 时钟周期(ns).ToString('N0')
            </summary>
        </member>
        <member name="P:Spear.Core.Tests.CodeTimerResult.GenerationList">
            <summary>
            GC 代数集合.
            </summary>
        </member>
        <member name="P:Spear.Core.Tests.CodeTimerResult.ThreadCount">
            <summary>
            线程的计数.
            </summary>
        </member>
        <member name="P:Spear.Core.Tests.CodeTimerResult.Iteration">
            <summary>
            重复的次数.
            </summary>
        </member>
        <member name="P:Spear.Core.Tests.CodeTimerResult.MockThinkTime">
            <summary>
            模拟思考的时间.
            </summary>
        </member>
        <member name="P:Spear.Core.Tests.CodeTimerResult.SuccessCount">
            <summary>
            执行成功计数.
            </summary>
        </member>
        <member name="P:Spear.Core.Tests.CodeTimerResult.FailureCount">
            <summary>
            执行失败计数.
            </summary>
        </member>
        <member name="M:Spear.Core.Tests.CodeTimerResult.Reset">
            <summary>
            重置 <see cref="T:Spear.Core.Tests.CodeTimer"/>.
            </summary>
            <returns>重置后的 <see cref="T:Spear.Core.Tests.CodeTimer"/> 对象实例.</returns>
        </member>
        <member name="M:Spear.Core.Tests.CodeTimerResult.ToString">
            <summary> 格式化测试结果 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary> 写操作 </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary> 读操作 </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Timing.TimestampType">
            <summary> 时间戳类型 </summary>
        </member>
        <member name="F:Spear.Core.Timing.TimestampType.Second">
            <summary> 秒 </summary>
        </member>
        <member name="F:Spear.Core.Timing.TimestampType.MilliSecond">
            <summary> 毫秒 </summary>
        </member>
        <member name="T:Spear.Core.Timing.DateTimeHelper">
            <summary> 时间辅助类 </summary>
        </member>
        <member name="F:Spear.Core.Timing.DateTimeHelper.ZoneTime">
            <summary> 起始时间 </summary>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToTimestamp(System.DateTime,System.DateTimeKind,Spear.Core.Timing.TimestampType)">
            <summary> 转换成时间戳 </summary>
            <param name="dateTime">需要转换的时间</param>
            <param name="kind">转换的时间类型（默认为UTC）</param>
            <param name="type">时间戳类型</param>
            <returns>时间戳</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToMillisecondsTimestamp(System.DateTime,System.DateTimeKind)">
            <summary> 转换成时间戳(毫秒) </summary>
            <param name="dateTime">需要转换的时间</param>
            <param name="kind">转换的时间类型（默认为UTC）</param>
            <returns>时间戳</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.FromTimestamp(System.Int64)">
            <summary>
            时间戳转换成日期
            </summary>
            <param name="timestamp">时间戳</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.FromMillisecondTimestamp(System.Int64)">
            <summary>
            时间戳转换成日期
            </summary>
            <param name="timestamp">时间戳</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToDayStart(System.String)">
            <summary>
            将日期转换为本日的开始时间
            </summary>
            <param name="value">2001-01-01</param>
            <returns>2001-01-01 00:00:00</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToDayStart(System.DateTime)">
            <summary>
            将日期转换为本日的开始时间
            </summary>
            <param name="value">任意时间</param>
            <returns>2001-01-01 00:00:00</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToDayEnd(System.String)">
            <summary>
            将日期转换为本日的开始时间
            </summary>
            <param name="value">2001-01-01</param>
            <returns>2001-01-01 23:59:59</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToDayEnd(System.DateTime)">
            <summary>
            将日期转换为本日的结束时间
            </summary>
            <param name="value">任意时间</param>
            <returns>2001-01-01 23:59:59</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToWeekStart(System.String)">
            <summary>
            将日期转换为本周的开始时间
            </summary>
            <param name="value">2001-01-01</param>
            <returns>2001-01-01 00:00:00</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToWeekStart(System.DateTime)">
            <summary>
            将日期转换为本周的开始时间
            </summary>
            <param name="value">任意时间</param>
            <returns>2001-01-01 00:00:00</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToWeekEnd(System.String)">
            <summary>
            将日期转换为本周的结束时间
            </summary>
            <param name="value">2001-01-01</param>
            <returns>2001-01-01 23:59:59</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToWeekEnd(System.DateTime)">
            <summary>
            将日期转换为本周的结束时间
            </summary>
            <param name="value">任意时间</param>
            <returns>2001-01-01 23:59:59</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.GetWeekStartOrEnd(System.DateTime,System.Boolean)">
            <summary>
            获取本周的开始日期或结束日期
            </summary>
            <param name="date">用于计算的日期</param>
            <param name="getWeekStart">是否是获取一周开始的日期</param>
            <returns>日期</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToMonthStart(System.String)">
            <summary>
            将日期转换为本月的开始时间
            </summary>
            <param name="value">2001-01-01</param>
            <returns>2001-01-01 00:00:00</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToMonthStart(System.DateTime)">
            <summary>
            将日期转换为本月的开始时间
            </summary>
            <param name="value">任意时间</param>
            <returns>2001-01-01 00:00:00</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToMonthEnd(System.String)">
            <summary>
            将日期转换为本月的结束时间
            </summary>
            <param name="value">2001-01-01</param>
            <returns>2001-01-31 23:59:59</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToMonthEnd(System.DateTime)">
            <summary>
            将日期转换为本月的结束时间
            </summary>
            <param name="value">任意时间</param>
            <returns>2001-01-31 23:59:59</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToYearStart(System.String)">
            <summary>
            将日期转换为本年的开始时间
            </summary>
            <param name="value">2001-01-01</param>
            <returns>2001-01-01 00:00:00</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToYearStart(System.DateTime)">
            <summary>
            将日期转换为本年的开始时间
            </summary>
            <param name="value">任意时间</param>
            <returns>2001-01-01 00:00:00</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToYearEnd(System.String)">
            <summary>
            将日期转换为本年的结束时间
            </summary>
            <param name="value">2001-01-01</param>
            <returns>2001-12-31 23:59:59</returns>
        </member>
        <member name="M:Spear.Core.Timing.DateTimeHelper.ToYearEnd(System.DateTime)">
            <summary>
            将日期转换为本年的结束时间
            </summary>
            <param name="value">任意时间</param>
            <returns>2001-12-31 23:59:59</returns>
        </member>
        <member name="M:Spear.Dapper.Config.ConfigExtensions.Const``1(System.String,``0)">
            <summary> 获取配置常量 </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Dapper.Config.ConfigExtensions.Site(System.String,System.String,System.String)">
            <summary> 获取站点 </summary>
            <param name="site"></param>
            <param name="relativeUrl"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Dapper.Config.ConfigExtensions.Site(System.Enum,System.String,System.String)">
            <summary> 获取站点 </summary>
            <param name="site"></param>
            <param name="relativeUrl"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
    </members>
</doc>
